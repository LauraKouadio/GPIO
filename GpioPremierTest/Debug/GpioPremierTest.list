
GpioPremierTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001b28  08001b28  00011b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b50  08001b50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001b50  08001b50  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b50  08001b50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b50  08001b50  00011b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b54  08001b54  00011b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08001b64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08001b64  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005729  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001322  00000000  00000000  0002575e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000638  00000000  00000000  00026a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d0  00000000  00000000  000270b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d72  00000000  00000000  00027688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006433  00000000  00000000  0003d3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e1a0  00000000  00000000  0004382d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c19cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001820  00000000  00000000  000c1a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001b10 	.word	0x08001b10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001b10 	.word	0x08001b10

0800014c <read_register>:
uint8_t Tx_data[40];
struct PortIO Current_Port;


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint32_t read_register( volatile uint32_t *register_to_read){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]

  uint32_t tmp = *register_to_read;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	60fb      	str	r3, [r7, #12]
  return(tmp);
 800015a:	68fb      	ldr	r3, [r7, #12]

 }
 800015c:	4618      	mov	r0, r3
 800015e:	3714      	adds	r7, #20
 8000160:	46bd      	mov	sp, r7
 8000162:	bc80      	pop	{r7}
 8000164:	4770      	bx	lr
	...

08000168 <PortIO_Clock>:
	volatile uint32_t *portAdressCrl; //ok dans gpio init
	volatile uint32_t *portAdressCrh; //ok dans gpio init
	volatile uint32_t *portAdressOdr; //ok dans gpio init
};

void PortIO_Clock(struct PortIO* _this){
 8000168:	b480      	push	{r7}
 800016a:	b083      	sub	sp, #12
 800016c:	af00      	add	r7, sp, #0
 800016e:	6078      	str	r0, [r7, #4]
	_this -> clock_for_gpio = (uint32_t*) 0x40021018;
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	4a0a      	ldr	r2, [pc, #40]	; (800019c <PortIO_Clock+0x34>)
 8000174:	619a      	str	r2, [r3, #24]
	_this -> active_clock = 0x1FC;
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 800017c:	601a      	str	r2, [r3, #0]

	*(_this-> clock_for_gpio) = *(_this-> clock_for_gpio) | (_this->active_clock);
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	699b      	ldr	r3, [r3, #24]
 8000182:	6819      	ldr	r1, [r3, #0]
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	681a      	ldr	r2, [r3, #0]
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	430a      	orrs	r2, r1
 800018e:	601a      	str	r2, [r3, #0]

}
 8000190:	bf00      	nop
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	40021018 	.word	0x40021018

080001a0 <PortIO_init>:

void PortIO_init(struct PortIO* _this)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b083      	sub	sp, #12
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]

	switch(_this->portLetter){
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	691b      	ldr	r3, [r3, #16]
 80001ac:	3b01      	subs	r3, #1
 80001ae:	2b03      	cmp	r3, #3
 80001b0:	d832      	bhi.n	8000218 <PortIO_init+0x78>
 80001b2:	a201      	add	r2, pc, #4	; (adr r2, 80001b8 <PortIO_init+0x18>)
 80001b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001b8:	080001c9 	.word	0x080001c9
 80001bc:	080001dd 	.word	0x080001dd
 80001c0:	080001f1 	.word	0x080001f1
 80001c4:	08000205 	.word	0x08000205

	case 1: //Port A
		_this ->portAdressCrl =(uint32_t *) 0x40010800;
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	4a16      	ldr	r2, [pc, #88]	; (8000224 <PortIO_init+0x84>)
 80001cc:	61da      	str	r2, [r3, #28]
		_this ->portAdressCrh =(uint32_t *) 0x40010804;
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	4a15      	ldr	r2, [pc, #84]	; (8000228 <PortIO_init+0x88>)
 80001d2:	621a      	str	r2, [r3, #32]
		_this ->portAdressOdr=(uint32_t *) 0x4001080C;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	4a15      	ldr	r2, [pc, #84]	; (800022c <PortIO_init+0x8c>)
 80001d8:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 80001da:	e01d      	b.n	8000218 <PortIO_init+0x78>

	case 2: //Port B
		_this ->portAdressCrl =(uint32_t *) 0x40010C00;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4a14      	ldr	r2, [pc, #80]	; (8000230 <PortIO_init+0x90>)
 80001e0:	61da      	str	r2, [r3, #28]
		_this ->portAdressCrh =(uint32_t *) 0x40010C04;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	4a13      	ldr	r2, [pc, #76]	; (8000234 <PortIO_init+0x94>)
 80001e6:	621a      	str	r2, [r3, #32]
		_this ->portAdressOdr =(uint32_t *) 0x40010C0C;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4a13      	ldr	r2, [pc, #76]	; (8000238 <PortIO_init+0x98>)
 80001ec:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 80001ee:	e013      	b.n	8000218 <PortIO_init+0x78>

	case 3: //Port C
		_this ->portAdressCrl =(uint32_t *) 0x40011000;
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	4a12      	ldr	r2, [pc, #72]	; (800023c <PortIO_init+0x9c>)
 80001f4:	61da      	str	r2, [r3, #28]
		_this ->portAdressCrh =(uint32_t *) 0x40011004;
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4a11      	ldr	r2, [pc, #68]	; (8000240 <PortIO_init+0xa0>)
 80001fa:	621a      	str	r2, [r3, #32]
		_this ->portAdressOdr =(uint32_t *) 0x4001100C;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4a11      	ldr	r2, [pc, #68]	; (8000244 <PortIO_init+0xa4>)
 8000200:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8000202:	e009      	b.n	8000218 <PortIO_init+0x78>

	case 4: //Port D
		_this ->portAdressCrl =(uint32_t *) 0x40011400;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4a10      	ldr	r2, [pc, #64]	; (8000248 <PortIO_init+0xa8>)
 8000208:	61da      	str	r2, [r3, #28]
		_this ->portAdressCrh =(uint32_t *) 0x40011404;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a0f      	ldr	r2, [pc, #60]	; (800024c <PortIO_init+0xac>)
 800020e:	621a      	str	r2, [r3, #32]
		_this ->portAdressOdr =(uint32_t *) 0x4001140C;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a0f      	ldr	r2, [pc, #60]	; (8000250 <PortIO_init+0xb0>)
 8000214:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8000216:	bf00      	nop

	}

}
 8000218:	bf00      	nop
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	bc80      	pop	{r7}
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	40010800 	.word	0x40010800
 8000228:	40010804 	.word	0x40010804
 800022c:	4001080c 	.word	0x4001080c
 8000230:	40010c00 	.word	0x40010c00
 8000234:	40010c04 	.word	0x40010c04
 8000238:	40010c0c 	.word	0x40010c0c
 800023c:	40011000 	.word	0x40011000
 8000240:	40011004 	.word	0x40011004
 8000244:	4001100c 	.word	0x4001100c
 8000248:	40011400 	.word	0x40011400
 800024c:	40011404 	.word	0x40011404
 8000250:	4001140c 	.word	0x4001140c

08000254 <Port_read_value>:
void Port_set_numPin(struct PortIO* _this, uint32_t NumPin){
	_this->numPin=NumPin;

}

void Port_read_value(struct PortIO* _this){
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]

	_this->actual_direction = *(_this->portAdressOdr) & (1<<_this->numPin);
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	687a      	ldr	r2, [r7, #4]
 8000264:	6892      	ldr	r2, [r2, #8]
 8000266:	2101      	movs	r1, #1
 8000268:	fa01 f202 	lsl.w	r2, r1, r2
 800026c:	401a      	ands	r2, r3
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	615a      	str	r2, [r3, #20]
	if(_this->actual_direction == (1<<_this->numPin)){
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	687a      	ldr	r2, [r7, #4]
 8000278:	6892      	ldr	r2, [r2, #8]
 800027a:	2101      	movs	r1, #1
 800027c:	fa01 f202 	lsl.w	r2, r1, r2
 8000280:	4293      	cmp	r3, r2
 8000282:	d103      	bne.n	800028c <Port_read_value+0x38>
		Tx_data[0]=1;
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <Port_read_value+0x48>)
 8000286:	2201      	movs	r2, #1
 8000288:	701a      	strb	r2, [r3, #0]
	else{
		Tx_data[0]=0;
	}


}
 800028a:	e002      	b.n	8000292 <Port_read_value+0x3e>
		Tx_data[0]=0;
 800028c:	4b03      	ldr	r3, [pc, #12]	; (800029c <Port_read_value+0x48>)
 800028e:	2200      	movs	r2, #0
 8000290:	701a      	strb	r2, [r3, #0]
}
 8000292:	bf00      	nop
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	20000074 	.word	0x20000074

080002a0 <Port_set_direction>:

void Port_set_direction(struct PortIO* _this)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]

	switch(_this ->gpio_direction){
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d003      	beq.n	80002b8 <Port_set_direction+0x18>
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	f000 80a0 	beq.w	80003f6 <Port_set_direction+0x156>
		break;

	}


}
 80002b6:	e13a      	b.n	800052e <Port_set_direction+0x28e>
		 if(_this-> numPin >=8){
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	689b      	ldr	r3, [r3, #8]
 80002bc:	2b07      	cmp	r3, #7
 80002be:	d926      	bls.n	800030e <Port_set_direction+0x6e>
		 	_this->actual_direction = read_register(_this->portAdressCrh);
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	6a1b      	ldr	r3, [r3, #32]
 80002c4:	4618      	mov	r0, r3
 80002c6:	f7ff ff41 	bl	800014c <read_register>
 80002ca:	4602      	mov	r2, r0
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	615a      	str	r2, [r3, #20]
		 	decalage_0 = ~(1 << (4*(_this-> numPin) +3-32));
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	3b1d      	subs	r3, #29
 80002d8:	2201      	movs	r2, #1
 80002da:	fa02 f303 	lsl.w	r3, r2, r3
 80002de:	43db      	mvns	r3, r3
 80002e0:	60fb      	str	r3, [r7, #12]
		 	decalage_1 = ~(1 << (4*(_this-> numPin) +2-32));
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	689b      	ldr	r3, [r3, #8]
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	3b1e      	subs	r3, #30
 80002ea:	2201      	movs	r2, #1
 80002ec:	fa02 f303 	lsl.w	r3, r2, r3
 80002f0:	43db      	mvns	r3, r3
 80002f2:	60bb      	str	r3, [r7, #8]
		 	_this->actual_direction = _this->actual_direction & decalage_0;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	695a      	ldr	r2, [r3, #20]
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	401a      	ands	r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	615a      	str	r2, [r3, #20]
		 	_this->actual_direction = _this->actual_direction & decalage_1;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	695a      	ldr	r2, [r3, #20]
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	401a      	ands	r2, r3
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	615a      	str	r2, [r3, #20]
 800030c:	e025      	b.n	800035a <Port_set_direction+0xba>
			 _this->actual_direction = read_register(_this->portAdressCrl);
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	69db      	ldr	r3, [r3, #28]
 8000312:	4618      	mov	r0, r3
 8000314:	f7ff ff1a 	bl	800014c <read_register>
 8000318:	4602      	mov	r2, r0
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	615a      	str	r2, [r3, #20]
			 decalage_0 = ~(1 << (4*(_this-> numPin) +3));
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	3303      	adds	r3, #3
 8000326:	2201      	movs	r2, #1
 8000328:	fa02 f303 	lsl.w	r3, r2, r3
 800032c:	43db      	mvns	r3, r3
 800032e:	60fb      	str	r3, [r7, #12]
		 	 decalage_1 = ~(1 << (4*(_this-> numPin) +2));
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	689b      	ldr	r3, [r3, #8]
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	3302      	adds	r3, #2
 8000338:	2201      	movs	r2, #1
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	43db      	mvns	r3, r3
 8000340:	60bb      	str	r3, [r7, #8]
		 	 _this->actual_direction = _this->actual_direction & decalage_0;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	695a      	ldr	r2, [r3, #20]
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	401a      	ands	r2, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	615a      	str	r2, [r3, #20]
		 	 _this->actual_direction = _this->actual_direction & decalage_1;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	695a      	ldr	r2, [r3, #20]
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	401a      	ands	r2, r3
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	615a      	str	r2, [r3, #20]
		 if(_this-> numPin >=8){
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	689b      	ldr	r3, [r3, #8]
 800035e:	2b07      	cmp	r3, #7
 8000360:	d927      	bls.n	80003b2 <Port_set_direction+0x112>
	 	   decalage_0 = ~(1 << (4*(_this-> numPin)-32));
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800036a:	3b08      	subs	r3, #8
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	2201      	movs	r2, #1
 8000370:	fa02 f303 	lsl.w	r3, r2, r3
 8000374:	43db      	mvns	r3, r3
 8000376:	60fb      	str	r3, [r7, #12]
	 	   decalage_1 = ~(1 << (4*(_this-> numPin)-32));
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	689b      	ldr	r3, [r3, #8]
 800037c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000380:	3b08      	subs	r3, #8
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	2201      	movs	r2, #1
 8000386:	fa02 f303 	lsl.w	r3, r2, r3
 800038a:	43db      	mvns	r3, r3
 800038c:	60bb      	str	r3, [r7, #8]
		   _this->actual_direction = _this->actual_direction & decalage_0;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	695a      	ldr	r2, [r3, #20]
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	401a      	ands	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	615a      	str	r2, [r3, #20]
		   _this->actual_direction = _this->actual_direction & decalage_1;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	695a      	ldr	r2, [r3, #20]
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	401a      	ands	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	615a      	str	r2, [r3, #20]
		   *(_this->portAdressCrl) = _this->actual_direction;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	69db      	ldr	r3, [r3, #28]
 80003aa:	687a      	ldr	r2, [r7, #4]
 80003ac:	6952      	ldr	r2, [r2, #20]
 80003ae:	601a      	str	r2, [r3, #0]
		break;
 80003b0:	e0bd      	b.n	800052e <Port_set_direction+0x28e>
		 	  decalage_0 = ~(1 << (4*(_this-> numPin)));
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	2201      	movs	r2, #1
 80003ba:	fa02 f303 	lsl.w	r3, r2, r3
 80003be:	43db      	mvns	r3, r3
 80003c0:	60fb      	str	r3, [r7, #12]
		 	  decalage_1 = ~(1 << (4*(_this-> numPin)));
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	689b      	ldr	r3, [r3, #8]
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	2201      	movs	r2, #1
 80003ca:	fa02 f303 	lsl.w	r3, r2, r3
 80003ce:	43db      	mvns	r3, r3
 80003d0:	60bb      	str	r3, [r7, #8]
			  _this->actual_direction = _this->actual_direction & decalage_0;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	695a      	ldr	r2, [r3, #20]
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	401a      	ands	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	615a      	str	r2, [r3, #20]
			  _this->actual_direction = _this->actual_direction & decalage_1;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	695a      	ldr	r2, [r3, #20]
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	401a      	ands	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	615a      	str	r2, [r3, #20]
			  *(_this->portAdressCrl) = _this->actual_direction;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	69db      	ldr	r3, [r3, #28]
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	6952      	ldr	r2, [r2, #20]
 80003f2:	601a      	str	r2, [r3, #0]
		break;
 80003f4:	e09b      	b.n	800052e <Port_set_direction+0x28e>
	 	 if(_this-> numPin >=8){
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	689b      	ldr	r3, [r3, #8]
 80003fa:	2b07      	cmp	r3, #7
 80003fc:	d926      	bls.n	800044c <Port_set_direction+0x1ac>
	 		_this->actual_direction = read_register(_this->portAdressCrh);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	6a1b      	ldr	r3, [r3, #32]
 8000402:	4618      	mov	r0, r3
 8000404:	f7ff fea2 	bl	800014c <read_register>
 8000408:	4602      	mov	r2, r0
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	615a      	str	r2, [r3, #20]
	 	 	 decalage_0 = ~(1 << ((4*(_this-> numPin) +2-32)));
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	3b1e      	subs	r3, #30
 8000416:	2201      	movs	r2, #1
 8000418:	fa02 f303 	lsl.w	r3, r2, r3
 800041c:	43db      	mvns	r3, r3
 800041e:	60fb      	str	r3, [r7, #12]
	 	 	 decalage_1 = ~(1 <<((4*(_this-> numPin) + 3-32)));
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	689b      	ldr	r3, [r3, #8]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	3b1d      	subs	r3, #29
 8000428:	2201      	movs	r2, #1
 800042a:	fa02 f303 	lsl.w	r3, r2, r3
 800042e:	43db      	mvns	r3, r3
 8000430:	60bb      	str	r3, [r7, #8]
	 	 	 _this->actual_direction = _this->actual_direction & decalage_0;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	695a      	ldr	r2, [r3, #20]
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	401a      	ands	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	615a      	str	r2, [r3, #20]
	 	 	 _this->actual_direction = _this->actual_direction & decalage_1;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	695a      	ldr	r2, [r3, #20]
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	401a      	ands	r2, r3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	615a      	str	r2, [r3, #20]
 800044a:	e025      	b.n	8000498 <Port_set_direction+0x1f8>
	 		_this->actual_direction = read_register(_this->portAdressCrl);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	69db      	ldr	r3, [r3, #28]
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff fe7b 	bl	800014c <read_register>
 8000456:	4602      	mov	r2, r0
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	615a      	str	r2, [r3, #20]
	 	 	 decalage_0 = ~(1 << (4*(_this-> numPin)+2));
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	3302      	adds	r3, #2
 8000464:	2201      	movs	r2, #1
 8000466:	fa02 f303 	lsl.w	r3, r2, r3
 800046a:	43db      	mvns	r3, r3
 800046c:	60fb      	str	r3, [r7, #12]
	 	 	 decalage_1 = ~(1 <<(4*(_this-> numPin)+ 3));
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	3303      	adds	r3, #3
 8000476:	2201      	movs	r2, #1
 8000478:	fa02 f303 	lsl.w	r3, r2, r3
 800047c:	43db      	mvns	r3, r3
 800047e:	60bb      	str	r3, [r7, #8]
	 	 	 _this->actual_direction = _this->actual_direction & decalage_0;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	695a      	ldr	r2, [r3, #20]
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	401a      	ands	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	615a      	str	r2, [r3, #20]
	 	 	 _this->actual_direction = _this->actual_direction & decalage_1;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	695a      	ldr	r2, [r3, #20]
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	401a      	ands	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	615a      	str	r2, [r3, #20]
	 	if(_this-> numPin>=8){
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	2b07      	cmp	r3, #7
 800049e:	d924      	bls.n	80004ea <Port_set_direction+0x24a>
	 	 	decalage_1 = 1<<( 4*(_this-> numPin) -32 );
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80004a8:	3b08      	subs	r3, #8
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	2201      	movs	r2, #1
 80004ae:	fa02 f303 	lsl.w	r3, r2, r3
 80004b2:	60bb      	str	r3, [r7, #8]
	 	 	decalage_0 = ~(1 << (4*(_this-> numPin) +1 -32));
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	3b1f      	subs	r3, #31
 80004bc:	2201      	movs	r2, #1
 80004be:	fa02 f303 	lsl.w	r3, r2, r3
 80004c2:	43db      	mvns	r3, r3
 80004c4:	60fb      	str	r3, [r7, #12]
		 	_this->actual_direction = _this->actual_direction | decalage_1;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	695a      	ldr	r2, [r3, #20]
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	431a      	orrs	r2, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	615a      	str	r2, [r3, #20]
		 	_this->actual_direction = _this->actual_direction & decalage_0;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	695a      	ldr	r2, [r3, #20]
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	401a      	ands	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	615a      	str	r2, [r3, #20]
		 	*(_this->portAdressCrh) = _this->actual_direction; //*(_this->portAdressCrh) & _this->actual_direction;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6a1b      	ldr	r3, [r3, #32]
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	6952      	ldr	r2, [r2, #20]
 80004e6:	601a      	str	r2, [r3, #0]
		break;
 80004e8:	e020      	b.n	800052c <Port_set_direction+0x28c>
	 	 	decalage_1 = 1<<( 4*(_this-> numPin));
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	689b      	ldr	r3, [r3, #8]
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	2201      	movs	r2, #1
 80004f2:	fa02 f303 	lsl.w	r3, r2, r3
 80004f6:	60bb      	str	r3, [r7, #8]
	 	 	decalage_0 = ~(1 << (4*(_this-> numPin) +1));
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	3301      	adds	r3, #1
 8000500:	2201      	movs	r2, #1
 8000502:	fa02 f303 	lsl.w	r3, r2, r3
 8000506:	43db      	mvns	r3, r3
 8000508:	60fb      	str	r3, [r7, #12]
		 	_this->actual_direction = _this->actual_direction | decalage_1;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	695a      	ldr	r2, [r3, #20]
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	431a      	orrs	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	615a      	str	r2, [r3, #20]
		 	_this->actual_direction = _this->actual_direction & decalage_0;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	695a      	ldr	r2, [r3, #20]
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	401a      	ands	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	615a      	str	r2, [r3, #20]
		 	*(_this->portAdressCrl) = _this->actual_direction; //*(_this->portAdressCrl) & _this->actual_direction;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	6952      	ldr	r2, [r2, #20]
 800052a:	601a      	str	r2, [r3, #0]
		break;
 800052c:	bf00      	nop
}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <Port_set_value>:

void Port_set_value(struct PortIO* _this){
 8000536:	b480      	push	{r7}
 8000538:	b085      	sub	sp, #20
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]


 	uint32_t decalage_1 =  1<< _this->numPin;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	689b      	ldr	r3, [r3, #8]
 8000542:	2201      	movs	r2, #1
 8000544:	fa02 f303 	lsl.w	r3, r2, r3
 8000548:	60fb      	str	r3, [r7, #12]

 	if(_this->val ==3){ //Commande off
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	68db      	ldr	r3, [r3, #12]
 800054e:	2b03      	cmp	r3, #3
 8000550:	d10b      	bne.n	800056a <Port_set_value+0x34>

 		//LED off
 		decalage_1 = decalage_1 ^ 0xFFFFFFFF;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	43db      	mvns	r3, r3
 8000556:	60fb      	str	r3, [r7, #12]
 		*(_this->portAdressOdr) = *(_this->portAdressOdr) & decalage_1;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800055c:	6819      	ldr	r1, [r3, #0]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000562:	68fa      	ldr	r2, [r7, #12]
 8000564:	400a      	ands	r2, r1
 8000566:	601a      	str	r2, [r3, #0]
        //LED on
 		*(_this->portAdressOdr) = *(_this->portAdressOdr) | decalage_1;

 	 }

}
 8000568:	e00b      	b.n	8000582 <Port_set_value+0x4c>
 	 else if (_this->val ==2){ //Commande ON
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	2b02      	cmp	r3, #2
 8000570:	d107      	bne.n	8000582 <Port_set_value+0x4c>
 		*(_this->portAdressOdr) = *(_this->portAdressOdr) | decalage_1;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000576:	6819      	ldr	r1, [r3, #0]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800057c:	68fa      	ldr	r2, [r7, #12]
 800057e:	430a      	orrs	r2, r1
 8000580:	601a      	str	r2, [r3, #0]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 f99a 	bl	80008c8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f852 	bl	800063c <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
  MX_USART2_UART_Init();
 8000598:	f000 f892 	bl	80006c0 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  PortIO_Clock(&Current_Port);
 800059c:	4824      	ldr	r0, [pc, #144]	; (8000630 <main+0xa4>)
 800059e:	f7ff fde3 	bl	8000168 <PortIO_Clock>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

while (1)
  {
	 HAL_UART_Receive(&huart2, Rx_data,5,7000);
 80005a2:	f641 3358 	movw	r3, #7000	; 0x1b58
 80005a6:	2205      	movs	r2, #5
 80005a8:	4922      	ldr	r1, [pc, #136]	; (8000634 <main+0xa8>)
 80005aa:	4823      	ldr	r0, [pc, #140]	; (8000638 <main+0xac>)
 80005ac:	f001 f909 	bl	80017c2 <HAL_UART_Receive>

	 if(Rx_data[0]==18 && Rx_data[1]==18){
 80005b0:	4b20      	ldr	r3, [pc, #128]	; (8000634 <main+0xa8>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b12      	cmp	r3, #18
 80005b6:	d1f4      	bne.n	80005a2 <main+0x16>
 80005b8:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <main+0xa8>)
 80005ba:	785b      	ldrb	r3, [r3, #1]
 80005bc:	2b12      	cmp	r3, #18
 80005be:	d1f0      	bne.n	80005a2 <main+0x16>

		 Current_Port.portLetter = Rx_data[4];
 80005c0:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <main+0xa8>)
 80005c2:	791b      	ldrb	r3, [r3, #4]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <main+0xa4>)
 80005c8:	611a      	str	r2, [r3, #16]
		 Current_Port.numPin = Rx_data[2];
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <main+0xa8>)
 80005cc:	789b      	ldrb	r3, [r3, #2]
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b17      	ldr	r3, [pc, #92]	; (8000630 <main+0xa4>)
 80005d2:	609a      	str	r2, [r3, #8]
		 PortIO_init(&Current_Port); //Adresses correspondantes au port choisi
 80005d4:	4816      	ldr	r0, [pc, #88]	; (8000630 <main+0xa4>)
 80005d6:	f7ff fde3 	bl	80001a0 <PortIO_init>

		 if(Rx_data[3] == 2 || Rx_data[3] ==3){
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <main+0xa8>)
 80005dc:	78db      	ldrb	r3, [r3, #3]
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d003      	beq.n	80005ea <main+0x5e>
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <main+0xa8>)
 80005e4:	78db      	ldrb	r3, [r3, #3]
 80005e6:	2b03      	cmp	r3, #3
 80005e8:	d108      	bne.n	80005fc <main+0x70>
			 Current_Port.val = Rx_data[3];
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <main+0xa8>)
 80005ec:	78db      	ldrb	r3, [r3, #3]
 80005ee:	461a      	mov	r2, r3
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <main+0xa4>)
 80005f2:	60da      	str	r2, [r3, #12]
			 Port_set_value(&Current_Port);
 80005f4:	480e      	ldr	r0, [pc, #56]	; (8000630 <main+0xa4>)
 80005f6:	f7ff ff9e 	bl	8000536 <Port_set_value>
 80005fa:	e017      	b.n	800062c <main+0xa0>
		 }
		 else if (Rx_data[3]== 0 || Rx_data[3] ==1){
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <main+0xa8>)
 80005fe:	78db      	ldrb	r3, [r3, #3]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d003      	beq.n	800060c <main+0x80>
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <main+0xa8>)
 8000606:	78db      	ldrb	r3, [r3, #3]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d108      	bne.n	800061e <main+0x92>
			 Current_Port.gpio_direction = Rx_data[3];
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <main+0xa8>)
 800060e:	78db      	ldrb	r3, [r3, #3]
 8000610:	461a      	mov	r2, r3
 8000612:	4b07      	ldr	r3, [pc, #28]	; (8000630 <main+0xa4>)
 8000614:	605a      	str	r2, [r3, #4]
			 Port_set_direction(&Current_Port);
 8000616:	4806      	ldr	r0, [pc, #24]	; (8000630 <main+0xa4>)
 8000618:	f7ff fe42 	bl	80002a0 <Port_set_direction>
 800061c:	e006      	b.n	800062c <main+0xa0>
		 }
		 else if(Rx_data[3]==4){
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <main+0xa8>)
 8000620:	78db      	ldrb	r3, [r3, #3]
 8000622:	2b04      	cmp	r3, #4
 8000624:	d1bd      	bne.n	80005a2 <main+0x16>
			 Port_read_value(&Current_Port);
 8000626:	4802      	ldr	r0, [pc, #8]	; (8000630 <main+0xa4>)
 8000628:	f7ff fe14 	bl	8000254 <Port_read_value>
	 HAL_UART_Receive(&huart2, Rx_data,5,7000);
 800062c:	e7b9      	b.n	80005a2 <main+0x16>
 800062e:	bf00      	nop
 8000630:	2000009c 	.word	0x2000009c
 8000634:	2000006c 	.word	0x2000006c
 8000638:	20000028 	.word	0x20000028

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b090      	sub	sp, #64	; 0x40
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0318 	add.w	r3, r7, #24
 8000646:	2228      	movs	r2, #40	; 0x28
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f001 fa58 	bl	8001b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065e:	2302      	movs	r3, #2
 8000660:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000662:	2301      	movs	r3, #1
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000666:	2310      	movs	r3, #16
 8000668:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800066e:	2300      	movs	r3, #0
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000672:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0318 	add.w	r3, r7, #24
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fc39 	bl	8000ef4 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000688:	f000 f844 	bl	8000714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800069c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2102      	movs	r1, #2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 fea6 	bl	80013f8 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006b2:	f000 f82f 	bl	8000714 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3740      	adds	r7, #64	; 0x40
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006c6:	4a12      	ldr	r2, [pc, #72]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006f8:	f001 f816 	bl	8001728 <HAL_UART_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000702:	f000 f807 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000028 	.word	0x20000028
 8000710:	40004400 	.word	0x40004400

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	e7fe      	b.n	800071c <Error_Handler+0x8>
	...

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <HAL_MspInit+0x5c>)
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	4a14      	ldr	r2, [pc, #80]	; (800077c <HAL_MspInit+0x5c>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6193      	str	r3, [r2, #24]
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_MspInit+0x5c>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <HAL_MspInit+0x5c>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	4a0e      	ldr	r2, [pc, #56]	; (800077c <HAL_MspInit+0x5c>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000748:	61d3      	str	r3, [r2, #28]
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <HAL_MspInit+0x5c>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <HAL_MspInit+0x60>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	4a04      	ldr	r2, [pc, #16]	; (8000780 <HAL_MspInit+0x60>)
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	40021000 	.word	0x40021000
 8000780:	40010000 	.word	0x40010000

08000784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a19      	ldr	r2, [pc, #100]	; (8000804 <HAL_UART_MspInit+0x80>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d12b      	bne.n	80007fc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <HAL_UART_MspInit+0x84>)
 80007a6:	69db      	ldr	r3, [r3, #28]
 80007a8:	4a17      	ldr	r2, [pc, #92]	; (8000808 <HAL_UART_MspInit+0x84>)
 80007aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ae:	61d3      	str	r3, [r2, #28]
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <HAL_UART_MspInit+0x84>)
 80007b2:	69db      	ldr	r3, [r3, #28]
 80007b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_UART_MspInit+0x84>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a11      	ldr	r2, [pc, #68]	; (8000808 <HAL_UART_MspInit+0x84>)
 80007c2:	f043 0304 	orr.w	r3, r3, #4
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <HAL_UART_MspInit+0x84>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0304 	and.w	r3, r3, #4
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007d4:	230c      	movs	r3, #12
 80007d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2302      	movs	r3, #2
 80007de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	4619      	mov	r1, r3
 80007e6:	4809      	ldr	r0, [pc, #36]	; (800080c <HAL_UART_MspInit+0x88>)
 80007e8:	f000 f9de 	bl	8000ba8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	2026      	movs	r0, #38	; 0x26
 80007f2:	f000 f9a2 	bl	8000b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007f6:	2026      	movs	r0, #38	; 0x26
 80007f8:	f000 f9bb 	bl	8000b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007fc:	bf00      	nop
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40004400 	.word	0x40004400
 8000808:	40021000 	.word	0x40021000
 800080c:	40010800 	.word	0x40010800

08000810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <NMI_Handler+0x4>

08000816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <HardFault_Handler+0x4>

0800081c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <MemManage_Handler+0x4>

08000822 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <BusFault_Handler+0x4>

08000828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <UsageFault_Handler+0x4>

0800082e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr

0800083a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr

08000846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000856:	f000 f87d 	bl	8000954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}

0800085e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000862:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000866:	f000 fb23 	bl	8000eb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}

0800086e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
	...

0800087c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800087c:	480c      	ldr	r0, [pc, #48]	; (80008b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800087e:	490d      	ldr	r1, [pc, #52]	; (80008b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000880:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800088c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000894:	4c0a      	ldr	r4, [pc, #40]	; (80008c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008a2:	f7ff ffe4 	bl	800086e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008a6:	f001 f907 	bl	8001ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008aa:	f7ff fe6f 	bl	800058c <main>
  bx lr
 80008ae:	4770      	bx	lr
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008b8:	08001b58 	.word	0x08001b58
  ldr r2, =_sbss
 80008bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008c0:	200000c8 	.word	0x200000c8

080008c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC1_2_IRQHandler>
	...

080008c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <HAL_Init+0x28>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <HAL_Init+0x28>)
 80008d2:	f043 0310 	orr.w	r3, r3, #16
 80008d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d8:	2003      	movs	r0, #3
 80008da:	f000 f923 	bl	8000b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008de:	2000      	movs	r0, #0
 80008e0:	f000 f808 	bl	80008f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e4:	f7ff ff1c 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40022000 	.word	0x40022000

080008f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_InitTick+0x54>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_InitTick+0x58>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090a:	fbb3 f3f1 	udiv	r3, r3, r1
 800090e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f93b 	bl	8000b8e <HAL_SYSTICK_Config>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e00e      	b.n	8000940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b0f      	cmp	r3, #15
 8000926:	d80a      	bhi.n	800093e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000928:	2200      	movs	r2, #0
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	f04f 30ff 	mov.w	r0, #4294967295
 8000930:	f000 f903 	bl	8000b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000934:	4a06      	ldr	r2, [pc, #24]	; (8000950 <HAL_InitTick+0x5c>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093a:	2300      	movs	r3, #0
 800093c:	e000      	b.n	8000940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000000 	.word	0x20000000
 800094c:	20000008 	.word	0x20000008
 8000950:	20000004 	.word	0x20000004

08000954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <HAL_IncTick+0x1c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_IncTick+0x20>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4413      	add	r3, r2
 8000964:	4a03      	ldr	r2, [pc, #12]	; (8000974 <HAL_IncTick+0x20>)
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	20000008 	.word	0x20000008
 8000974:	200000c4 	.word	0x200000c4

08000978 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return uwTick;
 800097c:	4b02      	ldr	r3, [pc, #8]	; (8000988 <HAL_GetTick+0x10>)
 800097e:	681b      	ldr	r3, [r3, #0]
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	200000c4 	.word	0x200000c4

0800098c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a8:	4013      	ands	r3, r2
 80009aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009be:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	60d3      	str	r3, [r2, #12]
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d8:	4b04      	ldr	r3, [pc, #16]	; (80009ec <__NVIC_GetPriorityGrouping+0x18>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	0a1b      	lsrs	r3, r3, #8
 80009de:	f003 0307 	and.w	r3, r3, #7
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	db0b      	blt.n	8000a1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	f003 021f 	and.w	r2, r3, #31
 8000a08:	4906      	ldr	r1, [pc, #24]	; (8000a24 <__NVIC_EnableIRQ+0x34>)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	095b      	lsrs	r3, r3, #5
 8000a10:	2001      	movs	r0, #1
 8000a12:	fa00 f202 	lsl.w	r2, r0, r2
 8000a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	e000e100 	.word	0xe000e100

08000a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	db0a      	blt.n	8000a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	490c      	ldr	r1, [pc, #48]	; (8000a74 <__NVIC_SetPriority+0x4c>)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	0112      	lsls	r2, r2, #4
 8000a48:	b2d2      	uxtb	r2, r2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a50:	e00a      	b.n	8000a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4908      	ldr	r1, [pc, #32]	; (8000a78 <__NVIC_SetPriority+0x50>)
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	f003 030f 	and.w	r3, r3, #15
 8000a5e:	3b04      	subs	r3, #4
 8000a60:	0112      	lsls	r2, r2, #4
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	440b      	add	r3, r1
 8000a66:	761a      	strb	r2, [r3, #24]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000e100 	.word	0xe000e100
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b089      	sub	sp, #36	; 0x24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	f1c3 0307 	rsb	r3, r3, #7
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	bf28      	it	cs
 8000a9a:	2304      	movcs	r3, #4
 8000a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d902      	bls.n	8000aac <NVIC_EncodePriority+0x30>
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3b03      	subs	r3, #3
 8000aaa:	e000      	b.n	8000aae <NVIC_EncodePriority+0x32>
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43da      	mvns	r2, r3
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	401a      	ands	r2, r3
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	43d9      	mvns	r1, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	4313      	orrs	r3, r2
         );
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3724      	adds	r7, #36	; 0x24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af0:	d301      	bcc.n	8000af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af2:	2301      	movs	r3, #1
 8000af4:	e00f      	b.n	8000b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <SysTick_Config+0x40>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afe:	210f      	movs	r1, #15
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f7ff ff90 	bl	8000a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <SysTick_Config+0x40>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0e:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <SysTick_Config+0x40>)
 8000b10:	2207      	movs	r2, #7
 8000b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	e000e010 	.word	0xe000e010

08000b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff ff2d 	bl	800098c <__NVIC_SetPriorityGrouping>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	4603      	mov	r3, r0
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
 8000b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b4c:	f7ff ff42 	bl	80009d4 <__NVIC_GetPriorityGrouping>
 8000b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	68b9      	ldr	r1, [r7, #8]
 8000b56:	6978      	ldr	r0, [r7, #20]
 8000b58:	f7ff ff90 	bl	8000a7c <NVIC_EncodePriority>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ff5f 	bl	8000a28 <__NVIC_SetPriority>
}
 8000b6a:	bf00      	nop
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4603      	mov	r3, r0
 8000b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff35 	bl	80009f0 <__NVIC_EnableIRQ>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ffa2 	bl	8000ae0 <SysTick_Config>
 8000b9c:	4603      	mov	r3, r0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b08b      	sub	sp, #44	; 0x2c
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bba:	e169      	b.n	8000e90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	69fa      	ldr	r2, [r7, #28]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	f040 8158 	bne.w	8000e8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	4a9a      	ldr	r2, [pc, #616]	; (8000e48 <HAL_GPIO_Init+0x2a0>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d05e      	beq.n	8000ca2 <HAL_GPIO_Init+0xfa>
 8000be4:	4a98      	ldr	r2, [pc, #608]	; (8000e48 <HAL_GPIO_Init+0x2a0>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d875      	bhi.n	8000cd6 <HAL_GPIO_Init+0x12e>
 8000bea:	4a98      	ldr	r2, [pc, #608]	; (8000e4c <HAL_GPIO_Init+0x2a4>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d058      	beq.n	8000ca2 <HAL_GPIO_Init+0xfa>
 8000bf0:	4a96      	ldr	r2, [pc, #600]	; (8000e4c <HAL_GPIO_Init+0x2a4>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d86f      	bhi.n	8000cd6 <HAL_GPIO_Init+0x12e>
 8000bf6:	4a96      	ldr	r2, [pc, #600]	; (8000e50 <HAL_GPIO_Init+0x2a8>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d052      	beq.n	8000ca2 <HAL_GPIO_Init+0xfa>
 8000bfc:	4a94      	ldr	r2, [pc, #592]	; (8000e50 <HAL_GPIO_Init+0x2a8>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d869      	bhi.n	8000cd6 <HAL_GPIO_Init+0x12e>
 8000c02:	4a94      	ldr	r2, [pc, #592]	; (8000e54 <HAL_GPIO_Init+0x2ac>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d04c      	beq.n	8000ca2 <HAL_GPIO_Init+0xfa>
 8000c08:	4a92      	ldr	r2, [pc, #584]	; (8000e54 <HAL_GPIO_Init+0x2ac>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d863      	bhi.n	8000cd6 <HAL_GPIO_Init+0x12e>
 8000c0e:	4a92      	ldr	r2, [pc, #584]	; (8000e58 <HAL_GPIO_Init+0x2b0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d046      	beq.n	8000ca2 <HAL_GPIO_Init+0xfa>
 8000c14:	4a90      	ldr	r2, [pc, #576]	; (8000e58 <HAL_GPIO_Init+0x2b0>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d85d      	bhi.n	8000cd6 <HAL_GPIO_Init+0x12e>
 8000c1a:	2b12      	cmp	r3, #18
 8000c1c:	d82a      	bhi.n	8000c74 <HAL_GPIO_Init+0xcc>
 8000c1e:	2b12      	cmp	r3, #18
 8000c20:	d859      	bhi.n	8000cd6 <HAL_GPIO_Init+0x12e>
 8000c22:	a201      	add	r2, pc, #4	; (adr r2, 8000c28 <HAL_GPIO_Init+0x80>)
 8000c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c28:	08000ca3 	.word	0x08000ca3
 8000c2c:	08000c7d 	.word	0x08000c7d
 8000c30:	08000c8f 	.word	0x08000c8f
 8000c34:	08000cd1 	.word	0x08000cd1
 8000c38:	08000cd7 	.word	0x08000cd7
 8000c3c:	08000cd7 	.word	0x08000cd7
 8000c40:	08000cd7 	.word	0x08000cd7
 8000c44:	08000cd7 	.word	0x08000cd7
 8000c48:	08000cd7 	.word	0x08000cd7
 8000c4c:	08000cd7 	.word	0x08000cd7
 8000c50:	08000cd7 	.word	0x08000cd7
 8000c54:	08000cd7 	.word	0x08000cd7
 8000c58:	08000cd7 	.word	0x08000cd7
 8000c5c:	08000cd7 	.word	0x08000cd7
 8000c60:	08000cd7 	.word	0x08000cd7
 8000c64:	08000cd7 	.word	0x08000cd7
 8000c68:	08000cd7 	.word	0x08000cd7
 8000c6c:	08000c85 	.word	0x08000c85
 8000c70:	08000c99 	.word	0x08000c99
 8000c74:	4a79      	ldr	r2, [pc, #484]	; (8000e5c <HAL_GPIO_Init+0x2b4>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d013      	beq.n	8000ca2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c7a:	e02c      	b.n	8000cd6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	623b      	str	r3, [r7, #32]
          break;
 8000c82:	e029      	b.n	8000cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	623b      	str	r3, [r7, #32]
          break;
 8000c8c:	e024      	b.n	8000cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	3308      	adds	r3, #8
 8000c94:	623b      	str	r3, [r7, #32]
          break;
 8000c96:	e01f      	b.n	8000cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	330c      	adds	r3, #12
 8000c9e:	623b      	str	r3, [r7, #32]
          break;
 8000ca0:	e01a      	b.n	8000cd8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d102      	bne.n	8000cb0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000caa:	2304      	movs	r3, #4
 8000cac:	623b      	str	r3, [r7, #32]
          break;
 8000cae:	e013      	b.n	8000cd8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d105      	bne.n	8000cc4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	69fa      	ldr	r2, [r7, #28]
 8000cc0:	611a      	str	r2, [r3, #16]
          break;
 8000cc2:	e009      	b.n	8000cd8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cc4:	2308      	movs	r3, #8
 8000cc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	69fa      	ldr	r2, [r7, #28]
 8000ccc:	615a      	str	r2, [r3, #20]
          break;
 8000cce:	e003      	b.n	8000cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
          break;
 8000cd4:	e000      	b.n	8000cd8 <HAL_GPIO_Init+0x130>
          break;
 8000cd6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	2bff      	cmp	r3, #255	; 0xff
 8000cdc:	d801      	bhi.n	8000ce2 <HAL_GPIO_Init+0x13a>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	e001      	b.n	8000ce6 <HAL_GPIO_Init+0x13e>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	2bff      	cmp	r3, #255	; 0xff
 8000cec:	d802      	bhi.n	8000cf4 <HAL_GPIO_Init+0x14c>
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	e002      	b.n	8000cfa <HAL_GPIO_Init+0x152>
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf6:	3b08      	subs	r3, #8
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	210f      	movs	r1, #15
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	fa01 f303 	lsl.w	r3, r1, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	6a39      	ldr	r1, [r7, #32]
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	fa01 f303 	lsl.w	r3, r1, r3
 8000d14:	431a      	orrs	r2, r3
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f000 80b1 	beq.w	8000e8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d28:	4b4d      	ldr	r3, [pc, #308]	; (8000e60 <HAL_GPIO_Init+0x2b8>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a4c      	ldr	r2, [pc, #304]	; (8000e60 <HAL_GPIO_Init+0x2b8>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b4a      	ldr	r3, [pc, #296]	; (8000e60 <HAL_GPIO_Init+0x2b8>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d40:	4a48      	ldr	r2, [pc, #288]	; (8000e64 <HAL_GPIO_Init+0x2bc>)
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	089b      	lsrs	r3, r3, #2
 8000d46:	3302      	adds	r3, #2
 8000d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	220f      	movs	r2, #15
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	4013      	ands	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a40      	ldr	r2, [pc, #256]	; (8000e68 <HAL_GPIO_Init+0x2c0>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d013      	beq.n	8000d94 <HAL_GPIO_Init+0x1ec>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a3f      	ldr	r2, [pc, #252]	; (8000e6c <HAL_GPIO_Init+0x2c4>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d00d      	beq.n	8000d90 <HAL_GPIO_Init+0x1e8>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a3e      	ldr	r2, [pc, #248]	; (8000e70 <HAL_GPIO_Init+0x2c8>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d007      	beq.n	8000d8c <HAL_GPIO_Init+0x1e4>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a3d      	ldr	r2, [pc, #244]	; (8000e74 <HAL_GPIO_Init+0x2cc>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d101      	bne.n	8000d88 <HAL_GPIO_Init+0x1e0>
 8000d84:	2303      	movs	r3, #3
 8000d86:	e006      	b.n	8000d96 <HAL_GPIO_Init+0x1ee>
 8000d88:	2304      	movs	r3, #4
 8000d8a:	e004      	b.n	8000d96 <HAL_GPIO_Init+0x1ee>
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	e002      	b.n	8000d96 <HAL_GPIO_Init+0x1ee>
 8000d90:	2301      	movs	r3, #1
 8000d92:	e000      	b.n	8000d96 <HAL_GPIO_Init+0x1ee>
 8000d94:	2300      	movs	r3, #0
 8000d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d98:	f002 0203 	and.w	r2, r2, #3
 8000d9c:	0092      	lsls	r2, r2, #2
 8000d9e:	4093      	lsls	r3, r2
 8000da0:	68fa      	ldr	r2, [r7, #12]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000da6:	492f      	ldr	r1, [pc, #188]	; (8000e64 <HAL_GPIO_Init+0x2bc>)
 8000da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	3302      	adds	r3, #2
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d006      	beq.n	8000dce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dc0:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <HAL_GPIO_Init+0x2d0>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	492c      	ldr	r1, [pc, #176]	; (8000e78 <HAL_GPIO_Init+0x2d0>)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	600b      	str	r3, [r1, #0]
 8000dcc:	e006      	b.n	8000ddc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dce:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <HAL_GPIO_Init+0x2d0>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	4928      	ldr	r1, [pc, #160]	; (8000e78 <HAL_GPIO_Init+0x2d0>)
 8000dd8:	4013      	ands	r3, r2
 8000dda:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d006      	beq.n	8000df6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000de8:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <HAL_GPIO_Init+0x2d0>)
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	4922      	ldr	r1, [pc, #136]	; (8000e78 <HAL_GPIO_Init+0x2d0>)
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	604b      	str	r3, [r1, #4]
 8000df4:	e006      	b.n	8000e04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000df6:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <HAL_GPIO_Init+0x2d0>)
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	491e      	ldr	r1, [pc, #120]	; (8000e78 <HAL_GPIO_Init+0x2d0>)
 8000e00:	4013      	ands	r3, r2
 8000e02:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d006      	beq.n	8000e1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e10:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <HAL_GPIO_Init+0x2d0>)
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	4918      	ldr	r1, [pc, #96]	; (8000e78 <HAL_GPIO_Init+0x2d0>)
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	608b      	str	r3, [r1, #8]
 8000e1c:	e006      	b.n	8000e2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <HAL_GPIO_Init+0x2d0>)
 8000e20:	689a      	ldr	r2, [r3, #8]
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	43db      	mvns	r3, r3
 8000e26:	4914      	ldr	r1, [pc, #80]	; (8000e78 <HAL_GPIO_Init+0x2d0>)
 8000e28:	4013      	ands	r3, r2
 8000e2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d021      	beq.n	8000e7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <HAL_GPIO_Init+0x2d0>)
 8000e3a:	68da      	ldr	r2, [r3, #12]
 8000e3c:	490e      	ldr	r1, [pc, #56]	; (8000e78 <HAL_GPIO_Init+0x2d0>)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	60cb      	str	r3, [r1, #12]
 8000e44:	e021      	b.n	8000e8a <HAL_GPIO_Init+0x2e2>
 8000e46:	bf00      	nop
 8000e48:	10320000 	.word	0x10320000
 8000e4c:	10310000 	.word	0x10310000
 8000e50:	10220000 	.word	0x10220000
 8000e54:	10210000 	.word	0x10210000
 8000e58:	10120000 	.word	0x10120000
 8000e5c:	10110000 	.word	0x10110000
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010000 	.word	0x40010000
 8000e68:	40010800 	.word	0x40010800
 8000e6c:	40010c00 	.word	0x40010c00
 8000e70:	40011000 	.word	0x40011000
 8000e74:	40011400 	.word	0x40011400
 8000e78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_GPIO_Init+0x304>)
 8000e7e:	68da      	ldr	r2, [r3, #12]
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	4909      	ldr	r1, [pc, #36]	; (8000eac <HAL_GPIO_Init+0x304>)
 8000e86:	4013      	ands	r3, r2
 8000e88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e96:	fa22 f303 	lsr.w	r3, r2, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f47f ae8e 	bne.w	8000bbc <HAL_GPIO_Init+0x14>
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	372c      	adds	r7, #44	; 0x2c
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	40010400 	.word	0x40010400

08000eb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ebc:	695a      	ldr	r2, [r3, #20]
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d006      	beq.n	8000ed4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ecc:	88fb      	ldrh	r3, [r7, #6]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f806 	bl	8000ee0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40010400 	.word	0x40010400

08000ee0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e272      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f000 8087 	beq.w	8001022 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f14:	4b92      	ldr	r3, [pc, #584]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	2b04      	cmp	r3, #4
 8000f1e:	d00c      	beq.n	8000f3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f20:	4b8f      	ldr	r3, [pc, #572]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 030c 	and.w	r3, r3, #12
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	d112      	bne.n	8000f52 <HAL_RCC_OscConfig+0x5e>
 8000f2c:	4b8c      	ldr	r3, [pc, #560]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f38:	d10b      	bne.n	8000f52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3a:	4b89      	ldr	r3, [pc, #548]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d06c      	beq.n	8001020 <HAL_RCC_OscConfig+0x12c>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d168      	bne.n	8001020 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e24c      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5a:	d106      	bne.n	8000f6a <HAL_RCC_OscConfig+0x76>
 8000f5c:	4b80      	ldr	r3, [pc, #512]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a7f      	ldr	r2, [pc, #508]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	e02e      	b.n	8000fc8 <HAL_RCC_OscConfig+0xd4>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10c      	bne.n	8000f8c <HAL_RCC_OscConfig+0x98>
 8000f72:	4b7b      	ldr	r3, [pc, #492]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a7a      	ldr	r2, [pc, #488]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	4b78      	ldr	r3, [pc, #480]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a77      	ldr	r2, [pc, #476]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	e01d      	b.n	8000fc8 <HAL_RCC_OscConfig+0xd4>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f94:	d10c      	bne.n	8000fb0 <HAL_RCC_OscConfig+0xbc>
 8000f96:	4b72      	ldr	r3, [pc, #456]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a71      	ldr	r2, [pc, #452]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	4b6f      	ldr	r3, [pc, #444]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a6e      	ldr	r2, [pc, #440]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e00b      	b.n	8000fc8 <HAL_RCC_OscConfig+0xd4>
 8000fb0:	4b6b      	ldr	r3, [pc, #428]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a6a      	ldr	r2, [pc, #424]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b68      	ldr	r3, [pc, #416]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a67      	ldr	r2, [pc, #412]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d013      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fcd2 	bl	8000978 <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fcce 	bl	8000978 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b64      	cmp	r3, #100	; 0x64
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e200      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fea:	4b5d      	ldr	r3, [pc, #372]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0f0      	beq.n	8000fd8 <HAL_RCC_OscConfig+0xe4>
 8000ff6:	e014      	b.n	8001022 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fcbe 	bl	8000978 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001000:	f7ff fcba 	bl	8000978 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b64      	cmp	r3, #100	; 0x64
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e1ec      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001012:	4b53      	ldr	r3, [pc, #332]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f0      	bne.n	8001000 <HAL_RCC_OscConfig+0x10c>
 800101e:	e000      	b.n	8001022 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d063      	beq.n	80010f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800102e:	4b4c      	ldr	r3, [pc, #304]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 030c 	and.w	r3, r3, #12
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00b      	beq.n	8001052 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800103a:	4b49      	ldr	r3, [pc, #292]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f003 030c 	and.w	r3, r3, #12
 8001042:	2b08      	cmp	r3, #8
 8001044:	d11c      	bne.n	8001080 <HAL_RCC_OscConfig+0x18c>
 8001046:	4b46      	ldr	r3, [pc, #280]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d116      	bne.n	8001080 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001052:	4b43      	ldr	r3, [pc, #268]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d005      	beq.n	800106a <HAL_RCC_OscConfig+0x176>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	691b      	ldr	r3, [r3, #16]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d001      	beq.n	800106a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e1c0      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106a:	4b3d      	ldr	r3, [pc, #244]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	4939      	ldr	r1, [pc, #228]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 800107a:	4313      	orrs	r3, r2
 800107c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107e:	e03a      	b.n	80010f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d020      	beq.n	80010ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001088:	4b36      	ldr	r3, [pc, #216]	; (8001164 <HAL_RCC_OscConfig+0x270>)
 800108a:	2201      	movs	r2, #1
 800108c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108e:	f7ff fc73 	bl	8000978 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001096:	f7ff fc6f 	bl	8000978 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e1a1      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a8:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b4:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4927      	ldr	r1, [pc, #156]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	600b      	str	r3, [r1, #0]
 80010c8:	e015      	b.n	80010f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <HAL_RCC_OscConfig+0x270>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fc52 	bl	8000978 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d8:	f7ff fc4e 	bl	8000978 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e180      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f0      	bne.n	80010d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d03a      	beq.n	8001178 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d019      	beq.n	800113e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_RCC_OscConfig+0x274>)
 800110c:	2201      	movs	r2, #1
 800110e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001110:	f7ff fc32 	bl	8000978 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001118:	f7ff fc2e 	bl	8000978 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e160      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0f0      	beq.n	8001118 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001136:	2001      	movs	r0, #1
 8001138:	f000 fad8 	bl	80016ec <RCC_Delay>
 800113c:	e01c      	b.n	8001178 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_RCC_OscConfig+0x274>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001144:	f7ff fc18 	bl	8000978 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800114a:	e00f      	b.n	800116c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800114c:	f7ff fc14 	bl	8000978 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d908      	bls.n	800116c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e146      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
 800115e:	bf00      	nop
 8001160:	40021000 	.word	0x40021000
 8001164:	42420000 	.word	0x42420000
 8001168:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116c:	4b92      	ldr	r3, [pc, #584]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1e9      	bne.n	800114c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 80a6 	beq.w	80012d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800118a:	4b8b      	ldr	r3, [pc, #556]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10d      	bne.n	80011b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	4b88      	ldr	r3, [pc, #544]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4a87      	ldr	r2, [pc, #540]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a0:	61d3      	str	r3, [r2, #28]
 80011a2:	4b85      	ldr	r3, [pc, #532]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ae:	2301      	movs	r3, #1
 80011b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b2:	4b82      	ldr	r3, [pc, #520]	; (80013bc <HAL_RCC_OscConfig+0x4c8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d118      	bne.n	80011f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011be:	4b7f      	ldr	r3, [pc, #508]	; (80013bc <HAL_RCC_OscConfig+0x4c8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a7e      	ldr	r2, [pc, #504]	; (80013bc <HAL_RCC_OscConfig+0x4c8>)
 80011c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ca:	f7ff fbd5 	bl	8000978 <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d2:	f7ff fbd1 	bl	8000978 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b64      	cmp	r3, #100	; 0x64
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e103      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e4:	4b75      	ldr	r3, [pc, #468]	; (80013bc <HAL_RCC_OscConfig+0x4c8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d106      	bne.n	8001206 <HAL_RCC_OscConfig+0x312>
 80011f8:	4b6f      	ldr	r3, [pc, #444]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	4a6e      	ldr	r2, [pc, #440]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6213      	str	r3, [r2, #32]
 8001204:	e02d      	b.n	8001262 <HAL_RCC_OscConfig+0x36e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10c      	bne.n	8001228 <HAL_RCC_OscConfig+0x334>
 800120e:	4b6a      	ldr	r3, [pc, #424]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001210:	6a1b      	ldr	r3, [r3, #32]
 8001212:	4a69      	ldr	r2, [pc, #420]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	6213      	str	r3, [r2, #32]
 800121a:	4b67      	ldr	r3, [pc, #412]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	4a66      	ldr	r2, [pc, #408]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001220:	f023 0304 	bic.w	r3, r3, #4
 8001224:	6213      	str	r3, [r2, #32]
 8001226:	e01c      	b.n	8001262 <HAL_RCC_OscConfig+0x36e>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2b05      	cmp	r3, #5
 800122e:	d10c      	bne.n	800124a <HAL_RCC_OscConfig+0x356>
 8001230:	4b61      	ldr	r3, [pc, #388]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	4a60      	ldr	r2, [pc, #384]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	6213      	str	r3, [r2, #32]
 800123c:	4b5e      	ldr	r3, [pc, #376]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	4a5d      	ldr	r2, [pc, #372]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6213      	str	r3, [r2, #32]
 8001248:	e00b      	b.n	8001262 <HAL_RCC_OscConfig+0x36e>
 800124a:	4b5b      	ldr	r3, [pc, #364]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	4a5a      	ldr	r2, [pc, #360]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001250:	f023 0301 	bic.w	r3, r3, #1
 8001254:	6213      	str	r3, [r2, #32]
 8001256:	4b58      	ldr	r3, [pc, #352]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	4a57      	ldr	r2, [pc, #348]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 800125c:	f023 0304 	bic.w	r3, r3, #4
 8001260:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d015      	beq.n	8001296 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126a:	f7ff fb85 	bl	8000978 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001270:	e00a      	b.n	8001288 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001272:	f7ff fb81 	bl	8000978 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001280:	4293      	cmp	r3, r2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e0b1      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001288:	4b4b      	ldr	r3, [pc, #300]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0ee      	beq.n	8001272 <HAL_RCC_OscConfig+0x37e>
 8001294:	e014      	b.n	80012c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001296:	f7ff fb6f 	bl	8000978 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800129c:	e00a      	b.n	80012b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800129e:	f7ff fb6b 	bl	8000978 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e09b      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b4:	4b40      	ldr	r3, [pc, #256]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1ee      	bne.n	800129e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d105      	bne.n	80012d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012c6:	4b3c      	ldr	r3, [pc, #240]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	4a3b      	ldr	r2, [pc, #236]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 8087 	beq.w	80013ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012dc:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 030c 	and.w	r3, r3, #12
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d061      	beq.n	80013ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d146      	bne.n	800137e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f0:	4b33      	ldr	r3, [pc, #204]	; (80013c0 <HAL_RCC_OscConfig+0x4cc>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f6:	f7ff fb3f 	bl	8000978 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012fe:	f7ff fb3b 	bl	8000978 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e06d      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001310:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f0      	bne.n	80012fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001324:	d108      	bne.n	8001338 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001326:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	4921      	ldr	r1, [pc, #132]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001338:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a19      	ldr	r1, [r3, #32]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	430b      	orrs	r3, r1
 800134a:	491b      	ldr	r1, [pc, #108]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 800134c:	4313      	orrs	r3, r2
 800134e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <HAL_RCC_OscConfig+0x4cc>)
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001356:	f7ff fb0f 	bl	8000978 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800135e:	f7ff fb0b 	bl	8000978 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e03d      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0x46a>
 800137c:	e035      	b.n	80013ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <HAL_RCC_OscConfig+0x4cc>)
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff faf8 	bl	8000978 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138c:	f7ff faf4 	bl	8000978 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e026      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x498>
 80013aa:	e01e      	b.n	80013ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d107      	bne.n	80013c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e019      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40007000 	.word	0x40007000
 80013c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_RCC_OscConfig+0x500>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d106      	bne.n	80013e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d001      	beq.n	80013ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40021000 	.word	0x40021000

080013f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0d0      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800140c:	4b6a      	ldr	r3, [pc, #424]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d910      	bls.n	800143c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141a:	4b67      	ldr	r3, [pc, #412]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 0207 	bic.w	r2, r3, #7
 8001422:	4965      	ldr	r1, [pc, #404]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800142a:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	429a      	cmp	r2, r3
 8001436:	d001      	beq.n	800143c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e0b8      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d020      	beq.n	800148a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001454:	4b59      	ldr	r3, [pc, #356]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4a58      	ldr	r2, [pc, #352]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 800145a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800145e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0308 	and.w	r3, r3, #8
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800146c:	4b53      	ldr	r3, [pc, #332]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4a52      	ldr	r2, [pc, #328]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001476:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001478:	4b50      	ldr	r3, [pc, #320]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	494d      	ldr	r1, [pc, #308]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001486:	4313      	orrs	r3, r2
 8001488:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d040      	beq.n	8001518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d107      	bne.n	80014ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149e:	4b47      	ldr	r3, [pc, #284]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d115      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e07f      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d107      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b6:	4b41      	ldr	r3, [pc, #260]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d109      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e073      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c6:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e06b      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014d6:	4b39      	ldr	r3, [pc, #228]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f023 0203 	bic.w	r2, r3, #3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4936      	ldr	r1, [pc, #216]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014e8:	f7ff fa46 	bl	8000978 <HAL_GetTick>
 80014ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ee:	e00a      	b.n	8001506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f0:	f7ff fa42 	bl	8000978 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fe:	4293      	cmp	r3, r2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e053      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001506:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 020c 	and.w	r2, r3, #12
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	429a      	cmp	r2, r3
 8001516:	d1eb      	bne.n	80014f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001518:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d210      	bcs.n	8001548 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 0207 	bic.w	r2, r3, #7
 800152e:	4922      	ldr	r1, [pc, #136]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d001      	beq.n	8001548 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e032      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d008      	beq.n	8001566 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	4916      	ldr	r1, [pc, #88]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	4313      	orrs	r3, r2
 8001564:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d009      	beq.n	8001586 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	490e      	ldr	r1, [pc, #56]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001586:	f000 f821 	bl	80015cc <HAL_RCC_GetSysClockFreq>
 800158a:	4602      	mov	r2, r0
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	490a      	ldr	r1, [pc, #40]	; (80015c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001598:	5ccb      	ldrb	r3, [r1, r3]
 800159a:	fa22 f303 	lsr.w	r3, r2, r3
 800159e:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <HAL_RCC_ClockConfig+0x1cc>)
 80015a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_RCC_ClockConfig+0x1d0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff f9a4 	bl	80008f4 <HAL_InitTick>

  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40022000 	.word	0x40022000
 80015bc:	40021000 	.word	0x40021000
 80015c0:	08001b38 	.word	0x08001b38
 80015c4:	20000000 	.word	0x20000000
 80015c8:	20000004 	.word	0x20000004

080015cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015cc:	b490      	push	{r4, r7}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015d2:	4b29      	ldr	r3, [pc, #164]	; (8001678 <HAL_RCC_GetSysClockFreq+0xac>)
 80015d4:	1d3c      	adds	r4, r7, #4
 80015d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015dc:	f240 2301 	movw	r3, #513	; 0x201
 80015e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015f6:	4b21      	ldr	r3, [pc, #132]	; (800167c <HAL_RCC_GetSysClockFreq+0xb0>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	2b04      	cmp	r3, #4
 8001604:	d002      	beq.n	800160c <HAL_RCC_GetSysClockFreq+0x40>
 8001606:	2b08      	cmp	r3, #8
 8001608:	d003      	beq.n	8001612 <HAL_RCC_GetSysClockFreq+0x46>
 800160a:	e02b      	b.n	8001664 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800160c:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <HAL_RCC_GetSysClockFreq+0xb4>)
 800160e:	623b      	str	r3, [r7, #32]
      break;
 8001610:	e02b      	b.n	800166a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	0c9b      	lsrs	r3, r3, #18
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	3328      	adds	r3, #40	; 0x28
 800161c:	443b      	add	r3, r7
 800161e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001622:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d012      	beq.n	8001654 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800162e:	4b13      	ldr	r3, [pc, #76]	; (800167c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	0c5b      	lsrs	r3, r3, #17
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	3328      	adds	r3, #40	; 0x28
 800163a:	443b      	add	r3, r7
 800163c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001640:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001646:	fb03 f202 	mul.w	r2, r3, r2
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
 8001652:	e004      	b.n	800165e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001658:	fb02 f303 	mul.w	r3, r2, r3
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	623b      	str	r3, [r7, #32]
      break;
 8001662:	e002      	b.n	800166a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001666:	623b      	str	r3, [r7, #32]
      break;
 8001668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800166a:	6a3b      	ldr	r3, [r7, #32]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3728      	adds	r7, #40	; 0x28
 8001670:	46bd      	mov	sp, r7
 8001672:	bc90      	pop	{r4, r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	08001b28 	.word	0x08001b28
 800167c:	40021000 	.word	0x40021000
 8001680:	007a1200 	.word	0x007a1200
 8001684:	003d0900 	.word	0x003d0900

08001688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800168c:	4b02      	ldr	r3, [pc, #8]	; (8001698 <HAL_RCC_GetHCLKFreq+0x10>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	20000000 	.word	0x20000000

0800169c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016a0:	f7ff fff2 	bl	8001688 <HAL_RCC_GetHCLKFreq>
 80016a4:	4602      	mov	r2, r0
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	4903      	ldr	r1, [pc, #12]	; (80016c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016b2:	5ccb      	ldrb	r3, [r1, r3]
 80016b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000
 80016c0:	08001b48 	.word	0x08001b48

080016c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016c8:	f7ff ffde 	bl	8001688 <HAL_RCC_GetHCLKFreq>
 80016cc:	4602      	mov	r2, r0
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	0adb      	lsrs	r3, r3, #11
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	4903      	ldr	r1, [pc, #12]	; (80016e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016da:	5ccb      	ldrb	r3, [r1, r3]
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000
 80016e8:	08001b48 	.word	0x08001b48

080016ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <RCC_Delay+0x34>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <RCC_Delay+0x38>)
 80016fa:	fba2 2303 	umull	r2, r3, r2, r3
 80016fe:	0a5b      	lsrs	r3, r3, #9
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	fb02 f303 	mul.w	r3, r2, r3
 8001706:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001708:	bf00      	nop
  }
  while (Delay --);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1e5a      	subs	r2, r3, #1
 800170e:	60fa      	str	r2, [r7, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f9      	bne.n	8001708 <RCC_Delay+0x1c>
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	20000000 	.word	0x20000000
 8001724:	10624dd3 	.word	0x10624dd3

08001728 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e03f      	b.n	80017ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d106      	bne.n	8001754 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff f818 	bl	8000784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2224      	movs	r2, #36	; 0x24
 8001758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800176a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f915 	bl	800199c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001780:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	695a      	ldr	r2, [r3, #20]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001790:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68da      	ldr	r2, [r3, #12]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2220      	movs	r2, #32
 80017ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2220      	movs	r2, #32
 80017b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b08a      	sub	sp, #40	; 0x28
 80017c6:	af02      	add	r7, sp, #8
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	603b      	str	r3, [r7, #0]
 80017ce:	4613      	mov	r3, r2
 80017d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b20      	cmp	r3, #32
 80017e0:	f040 808c 	bne.w	80018fc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <HAL_UART_Receive+0x2e>
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e084      	b.n	80018fe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d101      	bne.n	8001802 <HAL_UART_Receive+0x40>
 80017fe:	2302      	movs	r3, #2
 8001800:	e07d      	b.n	80018fe <HAL_UART_Receive+0x13c>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2222      	movs	r2, #34	; 0x22
 8001814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800181e:	f7ff f8ab 	bl	8000978 <HAL_GetTick>
 8001822:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	88fa      	ldrh	r2, [r7, #6]
 8001828:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	88fa      	ldrh	r2, [r7, #6]
 800182e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001838:	d108      	bne.n	800184c <HAL_UART_Receive+0x8a>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d104      	bne.n	800184c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	61bb      	str	r3, [r7, #24]
 800184a:	e003      	b.n	8001854 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800185c:	e043      	b.n	80018e6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2200      	movs	r2, #0
 8001866:	2120      	movs	r1, #32
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f000 f84c 	bl	8001906 <UART_WaitOnFlagUntilTimeout>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e042      	b.n	80018fe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10c      	bne.n	8001898 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	b29b      	uxth	r3, r3
 8001886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800188a:	b29a      	uxth	r2, r3
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	3302      	adds	r3, #2
 8001894:	61bb      	str	r3, [r7, #24]
 8001896:	e01f      	b.n	80018d8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018a0:	d007      	beq.n	80018b2 <HAL_UART_Receive+0xf0>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10a      	bne.n	80018c0 <HAL_UART_Receive+0xfe>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d106      	bne.n	80018c0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	701a      	strb	r2, [r3, #0]
 80018be:	e008      	b.n	80018d2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3301      	adds	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80018dc:	b29b      	uxth	r3, r3
 80018de:	3b01      	subs	r3, #1
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1b6      	bne.n	800185e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2220      	movs	r2, #32
 80018f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	e000      	b.n	80018fe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80018fc:	2302      	movs	r3, #2
  }
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3720      	adds	r7, #32
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b084      	sub	sp, #16
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	4613      	mov	r3, r2
 8001914:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001916:	e02c      	b.n	8001972 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191e:	d028      	beq.n	8001972 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d007      	beq.n	8001936 <UART_WaitOnFlagUntilTimeout+0x30>
 8001926:	f7ff f827 	bl	8000978 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	429a      	cmp	r2, r3
 8001934:	d21d      	bcs.n	8001972 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001944:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695a      	ldr	r2, [r3, #20]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0201 	bic.w	r2, r2, #1
 8001954:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2220      	movs	r2, #32
 800195a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2220      	movs	r2, #32
 8001962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e00f      	b.n	8001992 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4013      	ands	r3, r2
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	429a      	cmp	r2, r3
 8001980:	bf0c      	ite	eq
 8001982:	2301      	moveq	r3, #1
 8001984:	2300      	movne	r3, #0
 8001986:	b2db      	uxtb	r3, r3
 8001988:	461a      	mov	r2, r3
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	429a      	cmp	r2, r3
 800198e:	d0c3      	beq.n	8001918 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80019d6:	f023 030c 	bic.w	r3, r3, #12
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	68b9      	ldr	r1, [r7, #8]
 80019e0:	430b      	orrs	r3, r1
 80019e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699a      	ldr	r2, [r3, #24]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a2c      	ldr	r2, [pc, #176]	; (8001ab0 <UART_SetConfig+0x114>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d103      	bne.n	8001a0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001a04:	f7ff fe5e 	bl	80016c4 <HAL_RCC_GetPCLK2Freq>
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	e002      	b.n	8001a12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001a0c:	f7ff fe46 	bl	800169c <HAL_RCC_GetPCLK1Freq>
 8001a10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	009a      	lsls	r2, r3, #2
 8001a1c:	441a      	add	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a28:	4a22      	ldr	r2, [pc, #136]	; (8001ab4 <UART_SetConfig+0x118>)
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	0119      	lsls	r1, r3, #4
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	009a      	lsls	r2, r3, #2
 8001a3c:	441a      	add	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a48:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <UART_SetConfig+0x118>)
 8001a4a:	fba3 0302 	umull	r0, r3, r3, r2
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	2064      	movs	r0, #100	; 0x64
 8001a52:	fb00 f303 	mul.w	r3, r0, r3
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	3332      	adds	r3, #50	; 0x32
 8001a5c:	4a15      	ldr	r2, [pc, #84]	; (8001ab4 <UART_SetConfig+0x118>)
 8001a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a68:	4419      	add	r1, r3
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	009a      	lsls	r2, r3, #2
 8001a74:	441a      	add	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <UART_SetConfig+0x118>)
 8001a82:	fba3 0302 	umull	r0, r3, r3, r2
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	2064      	movs	r0, #100	; 0x64
 8001a8a:	fb00 f303 	mul.w	r3, r0, r3
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	3332      	adds	r3, #50	; 0x32
 8001a94:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <UART_SetConfig+0x118>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	095b      	lsrs	r3, r3, #5
 8001a9c:	f003 020f 	and.w	r2, r3, #15
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	440a      	add	r2, r1
 8001aa6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40013800 	.word	0x40013800
 8001ab4:	51eb851f 	.word	0x51eb851f

08001ab8 <__libc_init_array>:
 8001ab8:	b570      	push	{r4, r5, r6, lr}
 8001aba:	2600      	movs	r6, #0
 8001abc:	4d0c      	ldr	r5, [pc, #48]	; (8001af0 <__libc_init_array+0x38>)
 8001abe:	4c0d      	ldr	r4, [pc, #52]	; (8001af4 <__libc_init_array+0x3c>)
 8001ac0:	1b64      	subs	r4, r4, r5
 8001ac2:	10a4      	asrs	r4, r4, #2
 8001ac4:	42a6      	cmp	r6, r4
 8001ac6:	d109      	bne.n	8001adc <__libc_init_array+0x24>
 8001ac8:	f000 f822 	bl	8001b10 <_init>
 8001acc:	2600      	movs	r6, #0
 8001ace:	4d0a      	ldr	r5, [pc, #40]	; (8001af8 <__libc_init_array+0x40>)
 8001ad0:	4c0a      	ldr	r4, [pc, #40]	; (8001afc <__libc_init_array+0x44>)
 8001ad2:	1b64      	subs	r4, r4, r5
 8001ad4:	10a4      	asrs	r4, r4, #2
 8001ad6:	42a6      	cmp	r6, r4
 8001ad8:	d105      	bne.n	8001ae6 <__libc_init_array+0x2e>
 8001ada:	bd70      	pop	{r4, r5, r6, pc}
 8001adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ae0:	4798      	blx	r3
 8001ae2:	3601      	adds	r6, #1
 8001ae4:	e7ee      	b.n	8001ac4 <__libc_init_array+0xc>
 8001ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001aea:	4798      	blx	r3
 8001aec:	3601      	adds	r6, #1
 8001aee:	e7f2      	b.n	8001ad6 <__libc_init_array+0x1e>
 8001af0:	08001b50 	.word	0x08001b50
 8001af4:	08001b50 	.word	0x08001b50
 8001af8:	08001b50 	.word	0x08001b50
 8001afc:	08001b54 	.word	0x08001b54

08001b00 <memset>:
 8001b00:	4603      	mov	r3, r0
 8001b02:	4402      	add	r2, r0
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d100      	bne.n	8001b0a <memset+0xa>
 8001b08:	4770      	bx	lr
 8001b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8001b0e:	e7f9      	b.n	8001b04 <memset+0x4>

08001b10 <_init>:
 8001b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b12:	bf00      	nop
 8001b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b16:	bc08      	pop	{r3}
 8001b18:	469e      	mov	lr, r3
 8001b1a:	4770      	bx	lr

08001b1c <_fini>:
 8001b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b1e:	bf00      	nop
 8001b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b22:	bc08      	pop	{r3}
 8001b24:	469e      	mov	lr, r3
 8001b26:	4770      	bx	lr
