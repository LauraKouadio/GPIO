
GpioPremierTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001da8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001eb4  08001eb4  00011eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001edc  08001edc  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08001edc  08001edc  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001edc  08001edc  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001edc  08001edc  00011edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ee0  08001ee0  00011ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08001ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000002c  08001f10  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08001f10  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000058ea  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001306  00000000  00000000  0002593f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000630  00000000  00000000  00026c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c8  00000000  00000000  00027278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d72  00000000  00000000  00027840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000643f  00000000  00000000  0003d5b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e28b  00000000  00000000  000439f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c1c7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017f4  00000000  00000000  000c1ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e9c 	.word	0x08001e9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08001e9c 	.word	0x08001e9c

0800014c <read_register>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t read_register( volatile uint32_t *register_to_read){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]

 uint32_t tmp = *register_to_read;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	60fb      	str	r3, [r7, #12]
 return(tmp);
 800015a:	68fb      	ldr	r3, [r7, #12]

 }
 800015c:	4618      	mov	r0, r3
 800015e:	3714      	adds	r7, #20
 8000160:	46bd      	mov	sp, r7
 8000162:	bc80      	pop	{r7}
 8000164:	4770      	bx	lr

08000166 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000166:	b480      	push	{r7}
 8000168:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_IRQn 0 */

  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800016a:	bf00      	nop
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
	...

08000174 <set_bits_odr>:


// Function for the output configuration

 uint32_t set_bits_odr(uint32_t tmp, uint32_t PinNumber, uint32_t val,uint32_t PortLetter){
 8000174:	b480      	push	{r7}
 8000176:	b087      	sub	sp, #28
 8000178:	af00      	add	r7, sp, #0
 800017a:	60f8      	str	r0, [r7, #12]
 800017c:	60b9      	str	r1, [r7, #8]
 800017e:	607a      	str	r2, [r7, #4]
 8000180:	603b      	str	r3, [r7, #0]

 	uint32_t decalage_1 =  1<< PinNumber;
 8000182:	2201      	movs	r2, #1
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	fa02 f303 	lsl.w	r3, r2, r3
 800018a:	613b      	str	r3, [r7, #16]
 	volatile uint32_t *adress;

 	switch(PortLetter){
 800018c:	683b      	ldr	r3, [r7, #0]
 800018e:	3b01      	subs	r3, #1
 8000190:	2b03      	cmp	r3, #3
 8000192:	d817      	bhi.n	80001c4 <set_bits_odr+0x50>
 8000194:	a201      	add	r2, pc, #4	; (adr r2, 800019c <set_bits_odr+0x28>)
 8000196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800019a:	bf00      	nop
 800019c:	080001ad 	.word	0x080001ad
 80001a0:	080001b3 	.word	0x080001b3
 80001a4:	080001b9 	.word	0x080001b9
 80001a8:	080001bf 	.word	0x080001bf

 	case 1:
 		adress = (uint32_t *) 0x4001080C;
 80001ac:	4b13      	ldr	r3, [pc, #76]	; (80001fc <set_bits_odr+0x88>)
 80001ae:	617b      	str	r3, [r7, #20]

 		break;
 80001b0:	e008      	b.n	80001c4 <set_bits_odr+0x50>

 	case 2:
 		adress = (uint32_t *) 0x40010C0C;
 80001b2:	4b13      	ldr	r3, [pc, #76]	; (8000200 <set_bits_odr+0x8c>)
 80001b4:	617b      	str	r3, [r7, #20]
 		break;
 80001b6:	e005      	b.n	80001c4 <set_bits_odr+0x50>

 	case 3:
 		adress = (uint32_t *) 0x4001100C;
 80001b8:	4b12      	ldr	r3, [pc, #72]	; (8000204 <set_bits_odr+0x90>)
 80001ba:	617b      	str	r3, [r7, #20]
 		break;
 80001bc:	e002      	b.n	80001c4 <set_bits_odr+0x50>
 	case 4:
 		adress = (uint32_t *) 0x4001140C;
 80001be:	4b12      	ldr	r3, [pc, #72]	; (8000208 <set_bits_odr+0x94>)
 80001c0:	617b      	str	r3, [r7, #20]
 		break;
 80001c2:	bf00      	nop

 	}
 	if(val ==0){
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d109      	bne.n	80001de <set_bits_odr+0x6a>
 		//LED off
 		decalage_1 = decalage_1 ^ 0xFFFFFFFF;
 80001ca:	693b      	ldr	r3, [r7, #16]
 80001cc:	43db      	mvns	r3, r3
 80001ce:	613b      	str	r3, [r7, #16]
 		//tmp = tmp & decalage_1;
 		*(adress) = *(adress) & decalage_1;
 80001d0:	697b      	ldr	r3, [r7, #20]
 80001d2:	681a      	ldr	r2, [r3, #0]
 80001d4:	693b      	ldr	r3, [r7, #16]
 80001d6:	401a      	ands	r2, r3
 80001d8:	697b      	ldr	r3, [r7, #20]
 80001da:	601a      	str	r2, [r3, #0]
 80001dc:	e008      	b.n	80001f0 <set_bits_odr+0x7c>

 	  }

 	 else if (val ==1){
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2b01      	cmp	r3, #1
 80001e2:	d105      	bne.n	80001f0 <set_bits_odr+0x7c>
        //LED on
 		*(adress) = *(adress) | decalage_1;
 80001e4:	697b      	ldr	r3, [r7, #20]
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	693b      	ldr	r3, [r7, #16]
 80001ea:	431a      	orrs	r2, r3
 80001ec:	697b      	ldr	r3, [r7, #20]
 80001ee:	601a      	str	r2, [r3, #0]
 		//tmp = tmp | decalage_1;

 	 }
 	 return(tmp);
 80001f0:	68fb      	ldr	r3, [r7, #12]
   }
 80001f2:	4618      	mov	r0, r3
 80001f4:	371c      	adds	r7, #28
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	4001080c 	.word	0x4001080c
 8000200:	40010c0c 	.word	0x40010c0c
 8000204:	4001100c 	.word	0x4001100c
 8000208:	4001140c 	.word	0x4001140c

0800020c <set_bits_output_push_pull>:


//Configuration CRL for General output push pull

 uint32_t set_bits_output_push_pull(uint32_t tmp, uint32_t PinNumber){
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	6039      	str	r1, [r7, #0]
 	  uint32_t decalage_0;
 	  uint32_t decalage_1;

 	 //Config CNF5

 	 if(PinNumber >=8){
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	2b07      	cmp	r3, #7
 800021a:	d910      	bls.n	800023e <set_bits_output_push_pull+0x32>
 	 	 decalage_0 = ~(1 << ((4*PinNumber +2-32)));
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	009b      	lsls	r3, r3, #2
 8000220:	3b1e      	subs	r3, #30
 8000222:	2201      	movs	r2, #1
 8000224:	fa02 f303 	lsl.w	r3, r2, r3
 8000228:	43db      	mvns	r3, r3
 800022a:	60fb      	str	r3, [r7, #12]
 	 	 decalage_1 = ~(1 <<((4*PinNumber + 3-32)));
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	3b1d      	subs	r3, #29
 8000232:	2201      	movs	r2, #1
 8000234:	fa02 f303 	lsl.w	r3, r2, r3
 8000238:	43db      	mvns	r3, r3
 800023a:	60bb      	str	r3, [r7, #8]
 800023c:	e00f      	b.n	800025e <set_bits_output_push_pull+0x52>
 	 }
 	 else{
 	 	 decalage_0 = ~(1 << (4*PinNumber +2));
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	009b      	lsls	r3, r3, #2
 8000242:	3302      	adds	r3, #2
 8000244:	2201      	movs	r2, #1
 8000246:	fa02 f303 	lsl.w	r3, r2, r3
 800024a:	43db      	mvns	r3, r3
 800024c:	60fb      	str	r3, [r7, #12]
 	 	 decalage_1 = ~(1 <<(4*PinNumber + 3));
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	3303      	adds	r3, #3
 8000254:	2201      	movs	r2, #1
 8000256:	fa02 f303 	lsl.w	r3, r2, r3
 800025a:	43db      	mvns	r3, r3
 800025c:	60bb      	str	r3, [r7, #8]

 	 }

 	 tmp = tmp & decalage_0;
 800025e:	687a      	ldr	r2, [r7, #4]
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	4013      	ands	r3, r2
 8000264:	607b      	str	r3, [r7, #4]
 	 tmp = tmp & decalage_1;
 8000266:	687a      	ldr	r2, [r7, #4]
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	4013      	ands	r3, r2
 800026c:	607b      	str	r3, [r7, #4]

 	 //Config MODE5

 	if(PinNumber >=8){
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	2b07      	cmp	r3, #7
 8000272:	d911      	bls.n	8000298 <set_bits_output_push_pull+0x8c>
 	 	decalage_1 = 1<<( 4*PinNumber -32 );
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800027a:	3b08      	subs	r3, #8
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	2201      	movs	r2, #1
 8000280:	fa02 f303 	lsl.w	r3, r2, r3
 8000284:	60bb      	str	r3, [r7, #8]
 	 	decalage_0 = ~(1 << (4*PinNumber +1 -32));
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	009b      	lsls	r3, r3, #2
 800028a:	3b1f      	subs	r3, #31
 800028c:	2201      	movs	r2, #1
 800028e:	fa02 f303 	lsl.w	r3, r2, r3
 8000292:	43db      	mvns	r3, r3
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	e00d      	b.n	80002b4 <set_bits_output_push_pull+0xa8>

 	}

 	 else {
 	 	decalage_1 = 1<<( 4*PinNumber);
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	2201      	movs	r2, #1
 800029e:	fa02 f303 	lsl.w	r3, r2, r3
 80002a2:	60bb      	str	r3, [r7, #8]
 	 	decalage_0 = ~(1 << (4*PinNumber +1));
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	009b      	lsls	r3, r3, #2
 80002a8:	3301      	adds	r3, #1
 80002aa:	2201      	movs	r2, #1
 80002ac:	fa02 f303 	lsl.w	r3, r2, r3
 80002b0:	43db      	mvns	r3, r3
 80002b2:	60fb      	str	r3, [r7, #12]
 	 	}


 	 tmp= tmp | decalage_1;
 80002b4:	687a      	ldr	r2, [r7, #4]
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	4313      	orrs	r3, r2
 80002ba:	607b      	str	r3, [r7, #4]
 	 tmp = tmp & decalage_0;
 80002bc:	687a      	ldr	r2, [r7, #4]
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	4013      	ands	r3, r2
 80002c2:	607b      	str	r3, [r7, #4]

 	  return(tmp);
 80002c4:	687b      	ldr	r3, [r7, #4]

   }
 80002c6:	4618      	mov	r0, r3
 80002c8:	3714      	adds	r7, #20
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr

080002d0 <set_bits_input_analog>:

 uint32_t set_bits_input_analog(uint32_t tmp, uint32_t PinNumber){
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
 	  uint32_t decalage_0;
 	  uint32_t decalage_1;


 	  //config CNF5
 	  decalage_0 = ~(1 << (4*PinNumber +3));
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	009b      	lsls	r3, r3, #2
 80002de:	3303      	adds	r3, #3
 80002e0:	2201      	movs	r2, #1
 80002e2:	fa02 f303 	lsl.w	r3, r2, r3
 80002e6:	43db      	mvns	r3, r3
 80002e8:	60fb      	str	r3, [r7, #12]
 	  decalage_1 = ~(1 << (4*PinNumber +2));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	3302      	adds	r3, #2
 80002f0:	2201      	movs	r2, #1
 80002f2:	fa02 f303 	lsl.w	r3, r2, r3
 80002f6:	43db      	mvns	r3, r3
 80002f8:	60bb      	str	r3, [r7, #8]

 	 // decalage_0 = (decalage_0) ^ (0xFFFFFFFFu); // 0 à la bonne place 1 partout ailleurs
 	  tmp = tmp & decalage_0;
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	4013      	ands	r3, r2
 8000300:	607b      	str	r3, [r7, #4]
 	  tmp = tmp & decalage_1;
 8000302:	687a      	ldr	r2, [r7, #4]
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	4013      	ands	r3, r2
 8000308:	607b      	str	r3, [r7, #4]


 	  //config MODE
 	  decalage_0 = ~(1 << (4*PinNumber));
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	2201      	movs	r2, #1
 8000310:	fa02 f303 	lsl.w	r3, r2, r3
 8000314:	43db      	mvns	r3, r3
 8000316:	60fb      	str	r3, [r7, #12]
 	  decalage_1 = ~(1 << (4*PinNumber +1));
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	3301      	adds	r3, #1
 800031e:	2201      	movs	r2, #1
 8000320:	fa02 f303 	lsl.w	r3, r2, r3
 8000324:	43db      	mvns	r3, r3
 8000326:	60bb      	str	r3, [r7, #8]

 	 // decalage_0 = (decalage_0) ^ (0xFFFFFFFFu); // 0 à la bonne place 1 partout ailleurs
 	  tmp = tmp & decalage_0;
 8000328:	687a      	ldr	r2, [r7, #4]
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	4013      	ands	r3, r2
 800032e:	607b      	str	r3, [r7, #4]
 	  tmp = tmp & decalage_1;
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	4013      	ands	r3, r2
 8000336:	607b      	str	r3, [r7, #4]

 	  return(tmp);
 8000338:	687b      	ldr	r3, [r7, #4]
   }
 800033a:	4618      	mov	r0, r3
 800033c:	3714      	adds	r7, #20
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr

08000344 <set_bits>:

 uint32_t set_bits(uint32_t tmp, uint32_t NumPin){
 8000344:	b480      	push	{r7}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	6039      	str	r1, [r7, #0]
  	  uint32_t decalage_0;

  	  decalage_0 = 1 << (NumPin);
 800034e:	2201      	movs	r2, #1
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	fa02 f303 	lsl.w	r3, r2, r3
 8000356:	60fb      	str	r3, [r7, #12]
  	  tmp = tmp | decalage_0;
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	4313      	orrs	r3, r2
 800035e:	607b      	str	r3, [r7, #4]

  	  return(tmp);
 8000360:	687b      	ldr	r3, [r7, #4]

    }
 8000362:	4618      	mov	r0, r3
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr

0800036c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000372:	f000 fc4b 	bl	8000c0c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000376:	f000 fb03 	bl	8000980 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
  MX_USART2_UART_Init();
 800037a:	f000 fb43 	bl	8000a04 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  // Adresses for GPIO configuration //
  volatile uint32_t* GPIOA_custom = (uint32_t *) 0x40010800;
 800037e:	4b9c      	ldr	r3, [pc, #624]	; (80005f0 <main+0x284>)
 8000380:	617b      	str	r3, [r7, #20]
  volatile uint32_t* GPIOB_custom = (uint32_t *) 0x40010C00;
 8000382:	4b9c      	ldr	r3, [pc, #624]	; (80005f4 <main+0x288>)
 8000384:	613b      	str	r3, [r7, #16]
  volatile uint32_t* GPIOC_custom = (uint32_t *) 0x40011000;
 8000386:	4b9c      	ldr	r3, [pc, #624]	; (80005f8 <main+0x28c>)
 8000388:	60fb      	str	r3, [r7, #12]
  volatile uint32_t* GPIOD_custom = (uint32_t *) 0x40011400;
 800038a:	4b9c      	ldr	r3, [pc, #624]	; (80005fc <main+0x290>)
 800038c:	60bb      	str	r3, [r7, #8]

  volatile uint32_t *RCCAPB2ENR_custom = (uint32_t *) 0x40021018;
 800038e:	4b9c      	ldr	r3, [pc, #624]	; (8000600 <main+0x294>)
 8000390:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

while (1)
  {
	 HAL_UART_Receive(&huart2, Rx_data,5,7000);
 8000392:	f641 3358 	movw	r3, #7000	; 0x1b58
 8000396:	2205      	movs	r2, #5
 8000398:	499a      	ldr	r1, [pc, #616]	; (8000604 <main+0x298>)
 800039a:	489b      	ldr	r0, [pc, #620]	; (8000608 <main+0x29c>)
 800039c:	f001 fbd7 	bl	8001b4e <HAL_UART_Receive>


	 if(Rx_data[0]==18 && Rx_data[1]==18){
 80003a0:	4b98      	ldr	r3, [pc, #608]	; (8000604 <main+0x298>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b12      	cmp	r3, #18
 80003a6:	f040 82df 	bne.w	8000968 <main+0x5fc>
 80003aa:	4b96      	ldr	r3, [pc, #600]	; (8000604 <main+0x298>)
 80003ac:	785b      	ldrb	r3, [r3, #1]
 80003ae:	2b12      	cmp	r3, #18
 80003b0:	f040 82da 	bne.w	8000968 <main+0x5fc>
		 PortLetter= Rx_data[2];
 80003b4:	4b93      	ldr	r3, [pc, #588]	; (8000604 <main+0x298>)
 80003b6:	789a      	ldrb	r2, [r3, #2]
 80003b8:	4b94      	ldr	r3, [pc, #592]	; (800060c <main+0x2a0>)
 80003ba:	701a      	strb	r2, [r3, #0]
		 PinNumber = Rx_data[3];
 80003bc:	4b91      	ldr	r3, [pc, #580]	; (8000604 <main+0x298>)
 80003be:	78da      	ldrb	r2, [r3, #3]
 80003c0:	4b93      	ldr	r3, [pc, #588]	; (8000610 <main+0x2a4>)
 80003c2:	701a      	strb	r2, [r3, #0]
		 Direction = Rx_data[4];
 80003c4:	4b8f      	ldr	r3, [pc, #572]	; (8000604 <main+0x298>)
 80003c6:	791a      	ldrb	r2, [r3, #4]
 80003c8:	4b92      	ldr	r3, [pc, #584]	; (8000614 <main+0x2a8>)
 80003ca:	701a      	strb	r2, [r3, #0]


		 switch(PortLetter){
 80003cc:	4b8f      	ldr	r3, [pc, #572]	; (800060c <main+0x2a0>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	3b01      	subs	r3, #1
 80003d2:	2b03      	cmp	r3, #3
 80003d4:	d8dd      	bhi.n	8000392 <main+0x26>
 80003d6:	a201      	add	r2, pc, #4	; (adr r2, 80003dc <main+0x70>)
 80003d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003dc:	080003ed 	.word	0x080003ed
 80003e0:	0800051f 	.word	0x0800051f
 80003e4:	08000697 	.word	0x08000697
 80003e8:	0800080d 	.word	0x0800080d

			 case 1: //on active GPIOA
				 active_gpioA = set_bits(read_register(RCCAPB2ENR_custom),2);
 80003ec:	6878      	ldr	r0, [r7, #4]
 80003ee:	f7ff fead 	bl	800014c <read_register>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2102      	movs	r1, #2
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ffa4 	bl	8000344 <set_bits>
 80003fc:	4603      	mov	r3, r0
 80003fe:	4a86      	ldr	r2, [pc, #536]	; (8000618 <main+0x2ac>)
 8000400:	6013      	str	r3, [r2, #0]
				 *RCCAPB2ENR_custom =(*RCCAPB2ENR_custom) | active_gpioA; //clock activation
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	4b84      	ldr	r3, [pc, #528]	; (8000618 <main+0x2ac>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	431a      	orrs	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	601a      	str	r2, [r3, #0]

				 if(Direction == 1){ //Output push pull
 8000410:	4b80      	ldr	r3, [pc, #512]	; (8000614 <main+0x2a8>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b01      	cmp	r3, #1
 8000416:	d157      	bne.n	80004c8 <main+0x15c>

					 if(PinNumber <= 7){ //CR Low
 8000418:	4b7d      	ldr	r3, [pc, #500]	; (8000610 <main+0x2a4>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b07      	cmp	r3, #7
 800041e:	d811      	bhi.n	8000444 <main+0xd8>
						 selected_mode_gpioA =set_bits_output_push_pull(read_register(GPIOA_custom),PinNumber);
 8000420:	6978      	ldr	r0, [r7, #20]
 8000422:	f7ff fe93 	bl	800014c <read_register>
 8000426:	4603      	mov	r3, r0
 8000428:	4a79      	ldr	r2, [pc, #484]	; (8000610 <main+0x2a4>)
 800042a:	7812      	ldrb	r2, [r2, #0]
 800042c:	4611      	mov	r1, r2
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff feec 	bl	800020c <set_bits_output_push_pull>
 8000434:	4603      	mov	r3, r0
 8000436:	4a79      	ldr	r2, [pc, #484]	; (800061c <main+0x2b0>)
 8000438:	6013      	str	r3, [r2, #0]
						 *GPIOA_custom = selected_mode_gpioA; //output pushpull
 800043a:	4b78      	ldr	r3, [pc, #480]	; (800061c <main+0x2b0>)
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	697b      	ldr	r3, [r7, #20]
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	e013      	b.n	800046c <main+0x100>
					 }

					 else{//CR High
						 selected_mode_gpioA =set_bits_output_push_pull(read_register(GPIOA_custom_H),PinNumber); //output pushpull
 8000444:	4b76      	ldr	r3, [pc, #472]	; (8000620 <main+0x2b4>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff fe7f 	bl	800014c <read_register>
 800044e:	4603      	mov	r3, r0
 8000450:	4a6f      	ldr	r2, [pc, #444]	; (8000610 <main+0x2a4>)
 8000452:	7812      	ldrb	r2, [r2, #0]
 8000454:	4611      	mov	r1, r2
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff fed8 	bl	800020c <set_bits_output_push_pull>
 800045c:	4603      	mov	r3, r0
 800045e:	4a6f      	ldr	r2, [pc, #444]	; (800061c <main+0x2b0>)
 8000460:	6013      	str	r3, [r2, #0]
						 *GPIOA_custom_H = selected_mode_gpioA;
 8000462:	4b6f      	ldr	r3, [pc, #444]	; (8000620 <main+0x2b4>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a6d      	ldr	r2, [pc, #436]	; (800061c <main+0x2b0>)
 8000468:	6812      	ldr	r2, [r2, #0]
 800046a:	601a      	str	r2, [r3, #0]
					 //*GPIOA_custom = selected_mode_gpioA;

					//GPIO output for led toggle

					//lecture =*(GPIOA_custom + 0x0C);
					selected_output= set_bits_odr(read_register(GPIOA_odr),PinNumber,1,1);
 800046c:	4b6d      	ldr	r3, [pc, #436]	; (8000624 <main+0x2b8>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff fe6b 	bl	800014c <read_register>
 8000476:	4b66      	ldr	r3, [pc, #408]	; (8000610 <main+0x2a4>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	4619      	mov	r1, r3
 800047c:	2301      	movs	r3, #1
 800047e:	2201      	movs	r2, #1
 8000480:	f7ff fe78 	bl	8000174 <set_bits_odr>
 8000484:	4603      	mov	r3, r0
 8000486:	b29a      	uxth	r2, r3
 8000488:	4b67      	ldr	r3, [pc, #412]	; (8000628 <main+0x2bc>)
 800048a:	801a      	strh	r2, [r3, #0]
					//(GPIOA_custom + 0x0C) = selected_output;

					HAL_Delay(2000);
 800048c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000490:	f000 fc1e 	bl	8000cd0 <HAL_Delay>

					lecture =*(GPIOA_odr);
 8000494:	4b63      	ldr	r3, [pc, #396]	; (8000624 <main+0x2b8>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a64      	ldr	r2, [pc, #400]	; (800062c <main+0x2c0>)
 800049c:	6013      	str	r3, [r2, #0]
					selected_output= set_bits_odr(read_register(GPIOA_odr),PinNumber,0,1);
 800049e:	4b61      	ldr	r3, [pc, #388]	; (8000624 <main+0x2b8>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff fe52 	bl	800014c <read_register>
 80004a8:	4b59      	ldr	r3, [pc, #356]	; (8000610 <main+0x2a4>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	4619      	mov	r1, r3
 80004ae:	2301      	movs	r3, #1
 80004b0:	2200      	movs	r2, #0
 80004b2:	f7ff fe5f 	bl	8000174 <set_bits_odr>
 80004b6:	4603      	mov	r3, r0
 80004b8:	b29a      	uxth	r2, r3
 80004ba:	4b5b      	ldr	r3, [pc, #364]	; (8000628 <main+0x2bc>)
 80004bc:	801a      	strh	r2, [r3, #0]
					//*(GPIOA_custom + 0x0C) = selected_output;

					HAL_Delay(2000);
 80004be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004c2:	f000 fc05 	bl	8000cd0 <HAL_Delay>
					 }

					 //*GPIOA_custom = selected_mode_gpioA;
				 }

				 break;
 80004c6:	e250      	b.n	800096a <main+0x5fe>
					 if(PinNumber <= 7){ //CR Low
 80004c8:	4b51      	ldr	r3, [pc, #324]	; (8000610 <main+0x2a4>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2b07      	cmp	r3, #7
 80004ce:	d811      	bhi.n	80004f4 <main+0x188>
						 selected_mode_gpioA = set_bits_input_analog(read_register(GPIOA_custom),PinNumber);
 80004d0:	6978      	ldr	r0, [r7, #20]
 80004d2:	f7ff fe3b 	bl	800014c <read_register>
 80004d6:	4603      	mov	r3, r0
 80004d8:	4a4d      	ldr	r2, [pc, #308]	; (8000610 <main+0x2a4>)
 80004da:	7812      	ldrb	r2, [r2, #0]
 80004dc:	4611      	mov	r1, r2
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff fef6 	bl	80002d0 <set_bits_input_analog>
 80004e4:	4603      	mov	r3, r0
 80004e6:	4a4d      	ldr	r2, [pc, #308]	; (800061c <main+0x2b0>)
 80004e8:	6013      	str	r3, [r2, #0]
						 *GPIOA_custom = selected_mode_gpioA;
 80004ea:	4b4c      	ldr	r3, [pc, #304]	; (800061c <main+0x2b0>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	601a      	str	r2, [r3, #0]
				 break;
 80004f2:	e23a      	b.n	800096a <main+0x5fe>
						 selected_mode_gpioA = set_bits_input_analog(read_register(GPIOA_custom_H),PinNumber);
 80004f4:	4b4a      	ldr	r3, [pc, #296]	; (8000620 <main+0x2b4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff fe27 	bl	800014c <read_register>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a43      	ldr	r2, [pc, #268]	; (8000610 <main+0x2a4>)
 8000502:	7812      	ldrb	r2, [r2, #0]
 8000504:	4611      	mov	r1, r2
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff fee2 	bl	80002d0 <set_bits_input_analog>
 800050c:	4603      	mov	r3, r0
 800050e:	4a43      	ldr	r2, [pc, #268]	; (800061c <main+0x2b0>)
 8000510:	6013      	str	r3, [r2, #0]
						 *GPIOA_custom_H = selected_mode_gpioA;
 8000512:	4b43      	ldr	r3, [pc, #268]	; (8000620 <main+0x2b4>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a41      	ldr	r2, [pc, #260]	; (800061c <main+0x2b0>)
 8000518:	6812      	ldr	r2, [r2, #0]
 800051a:	601a      	str	r2, [r3, #0]
				 break;
 800051c:	e225      	b.n	800096a <main+0x5fe>

			 case 2: //on active GPIOB
				 active_gpioB = set_bits(read_register(RCCAPB2ENR_custom),3);
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	f7ff fe14 	bl	800014c <read_register>
 8000524:	4603      	mov	r3, r0
 8000526:	2103      	movs	r1, #3
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff ff0b 	bl	8000344 <set_bits>
 800052e:	4603      	mov	r3, r0
 8000530:	4a3f      	ldr	r2, [pc, #252]	; (8000630 <main+0x2c4>)
 8000532:	6013      	str	r3, [r2, #0]
				 *RCCAPB2ENR_custom =(*RCCAPB2ENR_custom) | active_gpioB; //clock activation
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b3d      	ldr	r3, [pc, #244]	; (8000630 <main+0x2c4>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	431a      	orrs	r2, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	601a      	str	r2, [r3, #0]

				 if(Direction ==1){ //Output push pull
 8000542:	4b34      	ldr	r3, [pc, #208]	; (8000614 <main+0x2a8>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d17a      	bne.n	8000640 <main+0x2d4>

					 if(PinNumber <= 7){
 800054a:	4b31      	ldr	r3, [pc, #196]	; (8000610 <main+0x2a4>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b07      	cmp	r3, #7
 8000550:	d811      	bhi.n	8000576 <main+0x20a>
						 selected_mode_gpioB =set_bits_output_push_pull(read_register(GPIOB_custom),PinNumber);
 8000552:	6938      	ldr	r0, [r7, #16]
 8000554:	f7ff fdfa 	bl	800014c <read_register>
 8000558:	4603      	mov	r3, r0
 800055a:	4a2d      	ldr	r2, [pc, #180]	; (8000610 <main+0x2a4>)
 800055c:	7812      	ldrb	r2, [r2, #0]
 800055e:	4611      	mov	r1, r2
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fe53 	bl	800020c <set_bits_output_push_pull>
 8000566:	4603      	mov	r3, r0
 8000568:	4a32      	ldr	r2, [pc, #200]	; (8000634 <main+0x2c8>)
 800056a:	6013      	str	r3, [r2, #0]
						 *GPIOB_custom = selected_mode_gpioB;} //output pushpull
 800056c:	4b31      	ldr	r3, [pc, #196]	; (8000634 <main+0x2c8>)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	693b      	ldr	r3, [r7, #16]
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	e013      	b.n	800059e <main+0x232>

					 else{
						 selected_mode_gpioB =set_bits_output_push_pull(read_register(GPIOB_custom_H),PinNumber);
 8000576:	4b30      	ldr	r3, [pc, #192]	; (8000638 <main+0x2cc>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff fde6 	bl	800014c <read_register>
 8000580:	4603      	mov	r3, r0
 8000582:	4a23      	ldr	r2, [pc, #140]	; (8000610 <main+0x2a4>)
 8000584:	7812      	ldrb	r2, [r2, #0]
 8000586:	4611      	mov	r1, r2
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff fe3f 	bl	800020c <set_bits_output_push_pull>
 800058e:	4603      	mov	r3, r0
 8000590:	4a28      	ldr	r2, [pc, #160]	; (8000634 <main+0x2c8>)
 8000592:	6013      	str	r3, [r2, #0]
						 *GPIOB_custom_H = selected_mode_gpioB;}
 8000594:	4b28      	ldr	r3, [pc, #160]	; (8000638 <main+0x2cc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a26      	ldr	r2, [pc, #152]	; (8000634 <main+0x2c8>)
 800059a:	6812      	ldr	r2, [r2, #0]
 800059c:	601a      	str	r2, [r3, #0]

					// *GPIOB_custom = selected_mode_gpioB;

					 //GPIO output for led toggle
					 selected_output= set_bits_odr(read_register(GPIOB_odr),PinNumber,1,2);
 800059e:	4b27      	ldr	r3, [pc, #156]	; (800063c <main+0x2d0>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff fdd2 	bl	800014c <read_register>
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <main+0x2a4>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4619      	mov	r1, r3
 80005ae:	2302      	movs	r3, #2
 80005b0:	2201      	movs	r2, #1
 80005b2:	f7ff fddf 	bl	8000174 <set_bits_odr>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <main+0x2bc>)
 80005bc:	801a      	strh	r2, [r3, #0]
					 //*(GPIOB_custom + 0x0C) = selected_output;
					 HAL_Delay(2000);
 80005be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005c2:	f000 fb85 	bl	8000cd0 <HAL_Delay>
					 selected_output= set_bits_odr(read_register(GPIOB_odr),PinNumber,0,2);
 80005c6:	4b1d      	ldr	r3, [pc, #116]	; (800063c <main+0x2d0>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff fdbe 	bl	800014c <read_register>
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <main+0x2a4>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	2302      	movs	r3, #2
 80005d8:	2200      	movs	r2, #0
 80005da:	f7ff fdcb 	bl	8000174 <set_bits_odr>
 80005de:	4603      	mov	r3, r0
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <main+0x2bc>)
 80005e4:	801a      	strh	r2, [r3, #0]
					 //*(GPIOB_custom + 0x0C) = selected_output;
					 HAL_Delay(2000);
 80005e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005ea:	f000 fb71 	bl	8000cd0 <HAL_Delay>
						 *GPIOB_custom_H = selected_mode_gpioB;
					}
					 //*GPIOB_custom = selected_mode_gpioB;

				 }
				 break;
 80005ee:	e1bc      	b.n	800096a <main+0x5fe>
 80005f0:	40010800 	.word	0x40010800
 80005f4:	40010c00 	.word	0x40010c00
 80005f8:	40011000 	.word	0x40011000
 80005fc:	40011400 	.word	0x40011400
 8000600:	40021018 	.word	0x40021018
 8000604:	2000008c 	.word	0x2000008c
 8000608:	20000048 	.word	0x20000048
 800060c:	20000091 	.word	0x20000091
 8000610:	20000092 	.word	0x20000092
 8000614:	20000093 	.word	0x20000093
 8000618:	2000009c 	.word	0x2000009c
 800061c:	200000ac 	.word	0x200000ac
 8000620:	20000000 	.word	0x20000000
 8000624:	20000004 	.word	0x20000004
 8000628:	200000bc 	.word	0x200000bc
 800062c:	20000098 	.word	0x20000098
 8000630:	200000a0 	.word	0x200000a0
 8000634:	200000b0 	.word	0x200000b0
 8000638:	20000008 	.word	0x20000008
 800063c:	2000000c 	.word	0x2000000c
					 if(PinNumber <=7){
 8000640:	4b88      	ldr	r3, [pc, #544]	; (8000864 <main+0x4f8>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b07      	cmp	r3, #7
 8000646:	d811      	bhi.n	800066c <main+0x300>
						 selected_mode_gpioB = set_bits_input_analog(read_register(GPIOB_custom),PinNumber);
 8000648:	6938      	ldr	r0, [r7, #16]
 800064a:	f7ff fd7f 	bl	800014c <read_register>
 800064e:	4603      	mov	r3, r0
 8000650:	4a84      	ldr	r2, [pc, #528]	; (8000864 <main+0x4f8>)
 8000652:	7812      	ldrb	r2, [r2, #0]
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff fe3a 	bl	80002d0 <set_bits_input_analog>
 800065c:	4603      	mov	r3, r0
 800065e:	4a82      	ldr	r2, [pc, #520]	; (8000868 <main+0x4fc>)
 8000660:	6013      	str	r3, [r2, #0]
						 *GPIOB_custom = selected_mode_gpioB;
 8000662:	4b81      	ldr	r3, [pc, #516]	; (8000868 <main+0x4fc>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	601a      	str	r2, [r3, #0]
				 break;
 800066a:	e17e      	b.n	800096a <main+0x5fe>
						 selected_mode_gpioB = set_bits_input_analog(read_register(GPIOB_custom_H),PinNumber);
 800066c:	4b7f      	ldr	r3, [pc, #508]	; (800086c <main+0x500>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff fd6b 	bl	800014c <read_register>
 8000676:	4603      	mov	r3, r0
 8000678:	4a7a      	ldr	r2, [pc, #488]	; (8000864 <main+0x4f8>)
 800067a:	7812      	ldrb	r2, [r2, #0]
 800067c:	4611      	mov	r1, r2
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff fe26 	bl	80002d0 <set_bits_input_analog>
 8000684:	4603      	mov	r3, r0
 8000686:	4a78      	ldr	r2, [pc, #480]	; (8000868 <main+0x4fc>)
 8000688:	6013      	str	r3, [r2, #0]
						 *GPIOB_custom_H = selected_mode_gpioB;
 800068a:	4b78      	ldr	r3, [pc, #480]	; (800086c <main+0x500>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a76      	ldr	r2, [pc, #472]	; (8000868 <main+0x4fc>)
 8000690:	6812      	ldr	r2, [r2, #0]
 8000692:	601a      	str	r2, [r3, #0]
				 break;
 8000694:	e169      	b.n	800096a <main+0x5fe>

			 case 3: //on active GPIOC
				 active_gpioC = set_bits(read_register(RCCAPB2ENR_custom),4);
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f7ff fd58 	bl	800014c <read_register>
 800069c:	4603      	mov	r3, r0
 800069e:	2104      	movs	r1, #4
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff fe4f 	bl	8000344 <set_bits>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a71      	ldr	r2, [pc, #452]	; (8000870 <main+0x504>)
 80006aa:	6013      	str	r3, [r2, #0]
				 *RCCAPB2ENR_custom =(*RCCAPB2ENR_custom) | active_gpioC; //clock activation
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b6f      	ldr	r3, [pc, #444]	; (8000870 <main+0x504>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	431a      	orrs	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	601a      	str	r2, [r3, #0]
				 lecture_clock = *RCCAPB2ENR_custom;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a6d      	ldr	r2, [pc, #436]	; (8000874 <main+0x508>)
 80006c0:	6013      	str	r3, [r2, #0]


				 if(Direction ==1){ //Output push pull
 80006c2:	4b6d      	ldr	r3, [pc, #436]	; (8000878 <main+0x50c>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d175      	bne.n	80007b6 <main+0x44a>

					 if(PinNumber <= 7){//CR Low
 80006ca:	4b66      	ldr	r3, [pc, #408]	; (8000864 <main+0x4f8>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b07      	cmp	r3, #7
 80006d0:	d815      	bhi.n	80006fe <main+0x392>
						 selected_mode_gpioC =set_bits_output_push_pull(read_register(GPIOC_custom),PinNumber);
 80006d2:	68f8      	ldr	r0, [r7, #12]
 80006d4:	f7ff fd3a 	bl	800014c <read_register>
 80006d8:	4603      	mov	r3, r0
 80006da:	4a62      	ldr	r2, [pc, #392]	; (8000864 <main+0x4f8>)
 80006dc:	7812      	ldrb	r2, [r2, #0]
 80006de:	4611      	mov	r1, r2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fd93 	bl	800020c <set_bits_output_push_pull>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a64      	ldr	r2, [pc, #400]	; (800087c <main+0x510>)
 80006ea:	6013      	str	r3, [r2, #0]
						 *GPIOC_custom = selected_mode_gpioC;
 80006ec:	4b63      	ldr	r3, [pc, #396]	; (800087c <main+0x510>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	601a      	str	r2, [r3, #0]
						 lecture = *(GPIOC_custom);} //output pushpull
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a61      	ldr	r2, [pc, #388]	; (8000880 <main+0x514>)
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	e01b      	b.n	8000736 <main+0x3ca>

					 else{// CR High
						 lecture = read_register(GPIOC_custom_H);
 80006fe:	4b61      	ldr	r3, [pc, #388]	; (8000884 <main+0x518>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fd22 	bl	800014c <read_register>
 8000708:	4603      	mov	r3, r0
 800070a:	4a5d      	ldr	r2, [pc, #372]	; (8000880 <main+0x514>)
 800070c:	6013      	str	r3, [r2, #0]
						 selected_mode_gpioC =set_bits_output_push_pull(read_register(GPIOC_custom_H),PinNumber);
 800070e:	4b5d      	ldr	r3, [pc, #372]	; (8000884 <main+0x518>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff fd1a 	bl	800014c <read_register>
 8000718:	4603      	mov	r3, r0
 800071a:	4a52      	ldr	r2, [pc, #328]	; (8000864 <main+0x4f8>)
 800071c:	7812      	ldrb	r2, [r2, #0]
 800071e:	4611      	mov	r1, r2
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fd73 	bl	800020c <set_bits_output_push_pull>
 8000726:	4603      	mov	r3, r0
 8000728:	4a54      	ldr	r2, [pc, #336]	; (800087c <main+0x510>)
 800072a:	6013      	str	r3, [r2, #0]
						 *(GPIOC_custom_H) = selected_mode_gpioC;}
 800072c:	4b55      	ldr	r3, [pc, #340]	; (8000884 <main+0x518>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a52      	ldr	r2, [pc, #328]	; (800087c <main+0x510>)
 8000732:	6812      	ldr	r2, [r2, #0]
 8000734:	601a      	str	r2, [r3, #0]
					     lecture = read_register(GPIOC_custom_H);
 8000736:	4b53      	ldr	r3, [pc, #332]	; (8000884 <main+0x518>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fd06 	bl	800014c <read_register>
 8000740:	4603      	mov	r3, r0
 8000742:	4a4f      	ldr	r2, [pc, #316]	; (8000880 <main+0x514>)
 8000744:	6013      	str	r3, [r2, #0]

					 //GPIO output for led toggle

					 lecture = *(GPIOC_odr);
 8000746:	4b50      	ldr	r3, [pc, #320]	; (8000888 <main+0x51c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a4c      	ldr	r2, [pc, #304]	; (8000880 <main+0x514>)
 800074e:	6013      	str	r3, [r2, #0]
					 selected_output= set_bits_odr(read_register(GPIOC_odr),PinNumber,1,3);
 8000750:	4b4d      	ldr	r3, [pc, #308]	; (8000888 <main+0x51c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fcf9 	bl	800014c <read_register>
 800075a:	4b42      	ldr	r3, [pc, #264]	; (8000864 <main+0x4f8>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	4619      	mov	r1, r3
 8000760:	2303      	movs	r3, #3
 8000762:	2201      	movs	r2, #1
 8000764:	f7ff fd06 	bl	8000174 <set_bits_odr>
 8000768:	4603      	mov	r3, r0
 800076a:	b29a      	uxth	r2, r3
 800076c:	4b47      	ldr	r3, [pc, #284]	; (800088c <main+0x520>)
 800076e:	801a      	strh	r2, [r3, #0]
					 lecture = *(GPIOC_odr);
 8000770:	4b45      	ldr	r3, [pc, #276]	; (8000888 <main+0x51c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a42      	ldr	r2, [pc, #264]	; (8000880 <main+0x514>)
 8000778:	6013      	str	r3, [r2, #0]
					 HAL_Delay(2000);
 800077a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800077e:	f000 faa7 	bl	8000cd0 <HAL_Delay>

					 selected_output= set_bits_odr(read_register(GPIOC_odr),PinNumber,0,3);
 8000782:	4b41      	ldr	r3, [pc, #260]	; (8000888 <main+0x51c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fce0 	bl	800014c <read_register>
 800078c:	4b35      	ldr	r3, [pc, #212]	; (8000864 <main+0x4f8>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	2303      	movs	r3, #3
 8000794:	2200      	movs	r2, #0
 8000796:	f7ff fced 	bl	8000174 <set_bits_odr>
 800079a:	4603      	mov	r3, r0
 800079c:	b29a      	uxth	r2, r3
 800079e:	4b3b      	ldr	r3, [pc, #236]	; (800088c <main+0x520>)
 80007a0:	801a      	strh	r2, [r3, #0]
					 lecture = *(GPIOC_odr);
 80007a2:	4b39      	ldr	r3, [pc, #228]	; (8000888 <main+0x51c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a35      	ldr	r2, [pc, #212]	; (8000880 <main+0x514>)
 80007aa:	6013      	str	r3, [r2, #0]
					 HAL_Delay(2000);
 80007ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007b0:	f000 fa8e 	bl	8000cd0 <HAL_Delay>
						 *GPIOC_custom_H = selected_mode_gpioC;
					 }
					 //*GPIOC_custom = selected_mode_gpioC;
				 }

				 break;
 80007b4:	e0d9      	b.n	800096a <main+0x5fe>
					 if(PinNumber <=7){ //CR Low
 80007b6:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <main+0x4f8>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b07      	cmp	r3, #7
 80007bc:	d811      	bhi.n	80007e2 <main+0x476>
						 selected_mode_gpioC = set_bits_input_analog(read_register(GPIOC_custom),PinNumber);
 80007be:	68f8      	ldr	r0, [r7, #12]
 80007c0:	f7ff fcc4 	bl	800014c <read_register>
 80007c4:	4603      	mov	r3, r0
 80007c6:	4a27      	ldr	r2, [pc, #156]	; (8000864 <main+0x4f8>)
 80007c8:	7812      	ldrb	r2, [r2, #0]
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fd7f 	bl	80002d0 <set_bits_input_analog>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4a29      	ldr	r2, [pc, #164]	; (800087c <main+0x510>)
 80007d6:	6013      	str	r3, [r2, #0]
						 *GPIOC_custom = selected_mode_gpioC;}
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <main+0x510>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	601a      	str	r2, [r3, #0]
				 break;
 80007e0:	e0c3      	b.n	800096a <main+0x5fe>
						 selected_mode_gpioC = set_bits_input_analog(read_register(GPIOC_custom_H),PinNumber);
 80007e2:	4b28      	ldr	r3, [pc, #160]	; (8000884 <main+0x518>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fcb0 	bl	800014c <read_register>
 80007ec:	4603      	mov	r3, r0
 80007ee:	4a1d      	ldr	r2, [pc, #116]	; (8000864 <main+0x4f8>)
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fd6b 	bl	80002d0 <set_bits_input_analog>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4a1f      	ldr	r2, [pc, #124]	; (800087c <main+0x510>)
 80007fe:	6013      	str	r3, [r2, #0]
						 *GPIOC_custom_H = selected_mode_gpioC;
 8000800:	4b20      	ldr	r3, [pc, #128]	; (8000884 <main+0x518>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a1d      	ldr	r2, [pc, #116]	; (800087c <main+0x510>)
 8000806:	6812      	ldr	r2, [r2, #0]
 8000808:	601a      	str	r2, [r3, #0]
				 break;
 800080a:	e0ae      	b.n	800096a <main+0x5fe>

			 case 4: //on active GPIOD
				 active_gpioD=set_bits(read_register(RCCAPB2ENR_custom),5);
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff fc9d 	bl	800014c <read_register>
 8000812:	4603      	mov	r3, r0
 8000814:	2105      	movs	r1, #5
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fd94 	bl	8000344 <set_bits>
 800081c:	4603      	mov	r3, r0
 800081e:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <main+0x524>)
 8000820:	6013      	str	r3, [r2, #0]
				 *RCCAPB2ENR_custom =(*RCCAPB2ENR_custom) | active_gpioD; //clock activation
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <main+0x524>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	431a      	orrs	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	601a      	str	r2, [r3, #0]

				 if(Direction ==1){ //Output push pull
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <main+0x50c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d16c      	bne.n	8000912 <main+0x5a6>
					 if(PinNumber <=7){ // CR Low
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <main+0x4f8>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b07      	cmp	r3, #7
 800083e:	d82b      	bhi.n	8000898 <main+0x52c>
						 selected_mode_gpioD =set_bits_output_push_pull(read_register(GPIOD_custom),PinNumber);
 8000840:	68b8      	ldr	r0, [r7, #8]
 8000842:	f7ff fc83 	bl	800014c <read_register>
 8000846:	4603      	mov	r3, r0
 8000848:	4a06      	ldr	r2, [pc, #24]	; (8000864 <main+0x4f8>)
 800084a:	7812      	ldrb	r2, [r2, #0]
 800084c:	4611      	mov	r1, r2
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fcdc 	bl	800020c <set_bits_output_push_pull>
 8000854:	4603      	mov	r3, r0
 8000856:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <main+0x528>)
 8000858:	6013      	str	r3, [r2, #0]
						 *GPIOD_custom = selected_mode_gpioD;} //output pushpull
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <main+0x528>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	e02d      	b.n	80008c0 <main+0x554>
 8000864:	20000092 	.word	0x20000092
 8000868:	200000b0 	.word	0x200000b0
 800086c:	20000008 	.word	0x20000008
 8000870:	200000a4 	.word	0x200000a4
 8000874:	20000094 	.word	0x20000094
 8000878:	20000093 	.word	0x20000093
 800087c:	200000b4 	.word	0x200000b4
 8000880:	20000098 	.word	0x20000098
 8000884:	20000010 	.word	0x20000010
 8000888:	20000014 	.word	0x20000014
 800088c:	200000bc 	.word	0x200000bc
 8000890:	200000a8 	.word	0x200000a8
 8000894:	200000b8 	.word	0x200000b8
					 else{ // CR High
						 selected_mode_gpioD =set_bits_output_push_pull(read_register(GPIOD_custom_H),PinNumber);
 8000898:	4b34      	ldr	r3, [pc, #208]	; (800096c <main+0x600>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fc55 	bl	800014c <read_register>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4a32      	ldr	r2, [pc, #200]	; (8000970 <main+0x604>)
 80008a6:	7812      	ldrb	r2, [r2, #0]
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fcae 	bl	800020c <set_bits_output_push_pull>
 80008b0:	4603      	mov	r3, r0
 80008b2:	4a30      	ldr	r2, [pc, #192]	; (8000974 <main+0x608>)
 80008b4:	6013      	str	r3, [r2, #0]
						 *GPIOD_custom_H = selected_mode_gpioD;
 80008b6:	4b2d      	ldr	r3, [pc, #180]	; (800096c <main+0x600>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a2e      	ldr	r2, [pc, #184]	; (8000974 <main+0x608>)
 80008bc:	6812      	ldr	r2, [r2, #0]
 80008be:	601a      	str	r2, [r3, #0]
					 }

					 //*GPIOD_custom = selected_mode_gpioD;

					 //GPIO output for led toggle
					 selected_output= set_bits_odr(read_register(GPIOD_odr),PinNumber,1,4);
 80008c0:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <main+0x60c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fc41 	bl	800014c <read_register>
 80008ca:	4b29      	ldr	r3, [pc, #164]	; (8000970 <main+0x604>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	4619      	mov	r1, r3
 80008d0:	2304      	movs	r3, #4
 80008d2:	2201      	movs	r2, #1
 80008d4:	f7ff fc4e 	bl	8000174 <set_bits_odr>
 80008d8:	4603      	mov	r3, r0
 80008da:	b29a      	uxth	r2, r3
 80008dc:	4b27      	ldr	r3, [pc, #156]	; (800097c <main+0x610>)
 80008de:	801a      	strh	r2, [r3, #0]
					 //*(GPIOD_custom + 0x0C) = selected_output;
					 HAL_Delay(2000);
 80008e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008e4:	f000 f9f4 	bl	8000cd0 <HAL_Delay>
					 selected_output= set_bits_odr(read_register(GPIOD_odr),PinNumber,0,4);
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <main+0x60c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fc2d 	bl	800014c <read_register>
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <main+0x604>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	4619      	mov	r1, r3
 80008f8:	2304      	movs	r3, #4
 80008fa:	2200      	movs	r2, #0
 80008fc:	f7ff fc3a 	bl	8000174 <set_bits_odr>
 8000900:	4603      	mov	r3, r0
 8000902:	b29a      	uxth	r2, r3
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <main+0x610>)
 8000906:	801a      	strh	r2, [r3, #0]
					 //*(GPIOD_custom + 0x0C) = selected_output;
					 HAL_Delay(2000);
 8000908:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800090c:	f000 f9e0 	bl	8000cd0 <HAL_Delay>
						 *GPIOD_custom_H = selected_mode_gpioD;
					 }
					 //*GPIOD_custom = selected_mode_gpioD;
				 }

				 break;
 8000910:	e02b      	b.n	800096a <main+0x5fe>
					 if(PinNumber <= 7){//CR Low
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <main+0x604>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b07      	cmp	r3, #7
 8000918:	d811      	bhi.n	800093e <main+0x5d2>
					 selected_mode_gpioD = set_bits_input_analog(read_register(GPIOD_custom),PinNumber);
 800091a:	68b8      	ldr	r0, [r7, #8]
 800091c:	f7ff fc16 	bl	800014c <read_register>
 8000920:	4603      	mov	r3, r0
 8000922:	4a13      	ldr	r2, [pc, #76]	; (8000970 <main+0x604>)
 8000924:	7812      	ldrb	r2, [r2, #0]
 8000926:	4611      	mov	r1, r2
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fcd1 	bl	80002d0 <set_bits_input_analog>
 800092e:	4603      	mov	r3, r0
 8000930:	4a10      	ldr	r2, [pc, #64]	; (8000974 <main+0x608>)
 8000932:	6013      	str	r3, [r2, #0]
					 *GPIOD_custom = selected_mode_gpioD;}
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <main+0x608>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	601a      	str	r2, [r3, #0]
				 break;
 800093c:	e015      	b.n	800096a <main+0x5fe>
						 selected_mode_gpioD = set_bits_input_analog(read_register(GPIOD_custom_H),PinNumber);
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <main+0x600>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fc02 	bl	800014c <read_register>
 8000948:	4603      	mov	r3, r0
 800094a:	4a09      	ldr	r2, [pc, #36]	; (8000970 <main+0x604>)
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	4611      	mov	r1, r2
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fcbd 	bl	80002d0 <set_bits_input_analog>
 8000956:	4603      	mov	r3, r0
 8000958:	4a06      	ldr	r2, [pc, #24]	; (8000974 <main+0x608>)
 800095a:	6013      	str	r3, [r2, #0]
						 *GPIOD_custom_H = selected_mode_gpioD;
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <main+0x600>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a04      	ldr	r2, [pc, #16]	; (8000974 <main+0x608>)
 8000962:	6812      	ldr	r2, [r2, #0]
 8000964:	601a      	str	r2, [r3, #0]
				 break;
 8000966:	e000      	b.n	800096a <main+0x5fe>

		 }
		 }
 8000968:	bf00      	nop
	 HAL_UART_Receive(&huart2, Rx_data,5,7000);
 800096a:	e512      	b.n	8000392 <main+0x26>
 800096c:	20000018 	.word	0x20000018
 8000970:	20000092 	.word	0x20000092
 8000974:	200000b8 	.word	0x200000b8
 8000978:	2000001c 	.word	0x2000001c
 800097c:	200000bc 	.word	0x200000bc

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b090      	sub	sp, #64	; 0x40
 8000984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	f107 0318 	add.w	r3, r7, #24
 800098a:	2228      	movs	r2, #40	; 0x28
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f001 fa7c 	bl	8001e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a2:	2302      	movs	r3, #2
 80009a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a6:	2301      	movs	r3, #1
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009aa:	2310      	movs	r3, #16
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ae:	2302      	movs	r3, #2
 80009b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80009b2:	2300      	movs	r3, #0
 80009b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80009b6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80009ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f107 0318 	add.w	r3, r7, #24
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fc5d 	bl	8001280 <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80009cc:	f000 f844 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d0:	230f      	movs	r3, #15
 80009d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d4:	2302      	movs	r3, #2
 80009d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2102      	movs	r1, #2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 feca 	bl	8001784 <HAL_RCC_ClockConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80009f6:	f000 f82f 	bl	8000a58 <Error_Handler>
  }
}
 80009fa:	bf00      	nop
 80009fc:	3740      	adds	r7, #64	; 0x40
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <MX_USART2_UART_Init+0x50>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a3c:	f001 f83a 	bl	8001ab4 <HAL_UART_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a46:	f000 f807 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000048 	.word	0x20000048
 8000a54:	40004400 	.word	0x40004400

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_MspInit+0x5c>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <HAL_MspInit+0x5c>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6193      	str	r3, [r2, #24]
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_MspInit+0x5c>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_MspInit+0x5c>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <HAL_MspInit+0x5c>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	61d3      	str	r3, [r2, #28]
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <HAL_MspInit+0x5c>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <HAL_MspInit+0x60>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <HAL_MspInit+0x60>)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40010000 	.word	0x40010000

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a19      	ldr	r2, [pc, #100]	; (8000b48 <HAL_UART_MspInit+0x80>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d12b      	bne.n	8000b40 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae8:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <HAL_UART_MspInit+0x84>)
 8000aea:	69db      	ldr	r3, [r3, #28]
 8000aec:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <HAL_UART_MspInit+0x84>)
 8000aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af2:	61d3      	str	r3, [r2, #28]
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <HAL_UART_MspInit+0x84>)
 8000af6:	69db      	ldr	r3, [r3, #28]
 8000af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_UART_MspInit+0x84>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <HAL_UART_MspInit+0x84>)
 8000b06:	f043 0304 	orr.w	r3, r3, #4
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <HAL_UART_MspInit+0x84>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4809      	ldr	r0, [pc, #36]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000b2c:	f000 fa02 	bl	8000f34 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2100      	movs	r1, #0
 8000b34:	2026      	movs	r0, #38	; 0x26
 8000b36:	f000 f9c6 	bl	8000ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b3a:	2026      	movs	r0, #38	; 0x26
 8000b3c:	f000 f9df 	bl	8000efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b40:	bf00      	nop
 8000b42:	3720      	adds	r7, #32
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40004400 	.word	0x40004400
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40010800 	.word	0x40010800

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <NMI_Handler+0x4>

08000b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <MemManage_Handler+0x4>

08000b66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr

08000b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr

08000b96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9a:	f000 f87d 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ba6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000baa:	f000 fb47 	bl	800123c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
	...

08000bc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc0:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bc2:	490d      	ldr	r1, [pc, #52]	; (8000bf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	; (8000bfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bd8:	4c0a      	ldr	r4, [pc, #40]	; (8000c04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000be6:	f7ff ffe4 	bl	8000bb2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f001 f92b 	bl	8001e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bee:	f7ff fbbd 	bl	800036c <main>
  bx lr
 8000bf2:	4770      	bx	lr
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000bfc:	08001ee4 	.word	0x08001ee4
  ldr r2, =_sbss
 8000c00:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000c04:	200000c4 	.word	0x200000c4

08000c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC1_2_IRQHandler>
	...

08000c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_Init+0x28>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <HAL_Init+0x28>)
 8000c16:	f043 0310 	orr.w	r3, r3, #16
 8000c1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f947 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 f808 	bl	8000c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff ff1c 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40022000 	.word	0x40022000

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x54>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x58>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f95f 	bl	8000f1a <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 f927 	bl	8000ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <HAL_InitTick+0x5c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000020 	.word	0x20000020
 8000c90:	20000028 	.word	0x20000028
 8000c94:	20000024 	.word	0x20000024

08000c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <HAL_IncTick+0x1c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <HAL_IncTick+0x20>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a03      	ldr	r2, [pc, #12]	; (8000cb8 <HAL_IncTick+0x20>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	20000028 	.word	0x20000028
 8000cb8:	200000c0 	.word	0x200000c0

08000cbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b02      	ldr	r3, [pc, #8]	; (8000ccc <HAL_GetTick+0x10>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	200000c0 	.word	0x200000c0

08000cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd8:	f7ff fff0 	bl	8000cbc <HAL_GetTick>
 8000cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce8:	d005      	beq.n	8000cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_Delay+0x44>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf6:	bf00      	nop
 8000cf8:	f7ff ffe0 	bl	8000cbc <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d8f7      	bhi.n	8000cf8 <HAL_Delay+0x28>
  {
  }
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000028 	.word	0x20000028

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0b      	blt.n	8000da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 021f 	and.w	r2, r3, #31
 8000d94:	4906      	ldr	r1, [pc, #24]	; (8000db0 <__NVIC_EnableIRQ+0x34>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	; (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	; (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	; 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e7c:	d301      	bcc.n	8000e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00f      	b.n	8000ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <SysTick_Config+0x40>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8a:	210f      	movs	r1, #15
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f7ff ff90 	bl	8000db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <SysTick_Config+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9a:	4b04      	ldr	r3, [pc, #16]	; (8000eac <SysTick_Config+0x40>)
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	e000e010 	.word	0xe000e010

08000eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ff2d 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed8:	f7ff ff42 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	6978      	ldr	r0, [r7, #20]
 8000ee4:	f7ff ff90 	bl	8000e08 <NVIC_EncodePriority>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff5f 	bl	8000db4 <__NVIC_SetPriority>
}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff35 	bl	8000d7c <__NVIC_EnableIRQ>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff ffa2 	bl	8000e6c <SysTick_Config>
 8000f28:	4603      	mov	r3, r0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b08b      	sub	sp, #44	; 0x2c
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f46:	e169      	b.n	800121c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	69fa      	ldr	r2, [r7, #28]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	f040 8158 	bne.w	8001216 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	4a9a      	ldr	r2, [pc, #616]	; (80011d4 <HAL_GPIO_Init+0x2a0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d05e      	beq.n	800102e <HAL_GPIO_Init+0xfa>
 8000f70:	4a98      	ldr	r2, [pc, #608]	; (80011d4 <HAL_GPIO_Init+0x2a0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d875      	bhi.n	8001062 <HAL_GPIO_Init+0x12e>
 8000f76:	4a98      	ldr	r2, [pc, #608]	; (80011d8 <HAL_GPIO_Init+0x2a4>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d058      	beq.n	800102e <HAL_GPIO_Init+0xfa>
 8000f7c:	4a96      	ldr	r2, [pc, #600]	; (80011d8 <HAL_GPIO_Init+0x2a4>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d86f      	bhi.n	8001062 <HAL_GPIO_Init+0x12e>
 8000f82:	4a96      	ldr	r2, [pc, #600]	; (80011dc <HAL_GPIO_Init+0x2a8>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d052      	beq.n	800102e <HAL_GPIO_Init+0xfa>
 8000f88:	4a94      	ldr	r2, [pc, #592]	; (80011dc <HAL_GPIO_Init+0x2a8>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d869      	bhi.n	8001062 <HAL_GPIO_Init+0x12e>
 8000f8e:	4a94      	ldr	r2, [pc, #592]	; (80011e0 <HAL_GPIO_Init+0x2ac>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d04c      	beq.n	800102e <HAL_GPIO_Init+0xfa>
 8000f94:	4a92      	ldr	r2, [pc, #584]	; (80011e0 <HAL_GPIO_Init+0x2ac>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d863      	bhi.n	8001062 <HAL_GPIO_Init+0x12e>
 8000f9a:	4a92      	ldr	r2, [pc, #584]	; (80011e4 <HAL_GPIO_Init+0x2b0>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d046      	beq.n	800102e <HAL_GPIO_Init+0xfa>
 8000fa0:	4a90      	ldr	r2, [pc, #576]	; (80011e4 <HAL_GPIO_Init+0x2b0>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d85d      	bhi.n	8001062 <HAL_GPIO_Init+0x12e>
 8000fa6:	2b12      	cmp	r3, #18
 8000fa8:	d82a      	bhi.n	8001000 <HAL_GPIO_Init+0xcc>
 8000faa:	2b12      	cmp	r3, #18
 8000fac:	d859      	bhi.n	8001062 <HAL_GPIO_Init+0x12e>
 8000fae:	a201      	add	r2, pc, #4	; (adr r2, 8000fb4 <HAL_GPIO_Init+0x80>)
 8000fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb4:	0800102f 	.word	0x0800102f
 8000fb8:	08001009 	.word	0x08001009
 8000fbc:	0800101b 	.word	0x0800101b
 8000fc0:	0800105d 	.word	0x0800105d
 8000fc4:	08001063 	.word	0x08001063
 8000fc8:	08001063 	.word	0x08001063
 8000fcc:	08001063 	.word	0x08001063
 8000fd0:	08001063 	.word	0x08001063
 8000fd4:	08001063 	.word	0x08001063
 8000fd8:	08001063 	.word	0x08001063
 8000fdc:	08001063 	.word	0x08001063
 8000fe0:	08001063 	.word	0x08001063
 8000fe4:	08001063 	.word	0x08001063
 8000fe8:	08001063 	.word	0x08001063
 8000fec:	08001063 	.word	0x08001063
 8000ff0:	08001063 	.word	0x08001063
 8000ff4:	08001063 	.word	0x08001063
 8000ff8:	08001011 	.word	0x08001011
 8000ffc:	08001025 	.word	0x08001025
 8001000:	4a79      	ldr	r2, [pc, #484]	; (80011e8 <HAL_GPIO_Init+0x2b4>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d013      	beq.n	800102e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001006:	e02c      	b.n	8001062 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	623b      	str	r3, [r7, #32]
          break;
 800100e:	e029      	b.n	8001064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	3304      	adds	r3, #4
 8001016:	623b      	str	r3, [r7, #32]
          break;
 8001018:	e024      	b.n	8001064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	3308      	adds	r3, #8
 8001020:	623b      	str	r3, [r7, #32]
          break;
 8001022:	e01f      	b.n	8001064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	330c      	adds	r3, #12
 800102a:	623b      	str	r3, [r7, #32]
          break;
 800102c:	e01a      	b.n	8001064 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d102      	bne.n	800103c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001036:	2304      	movs	r3, #4
 8001038:	623b      	str	r3, [r7, #32]
          break;
 800103a:	e013      	b.n	8001064 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d105      	bne.n	8001050 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001044:	2308      	movs	r3, #8
 8001046:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69fa      	ldr	r2, [r7, #28]
 800104c:	611a      	str	r2, [r3, #16]
          break;
 800104e:	e009      	b.n	8001064 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001050:	2308      	movs	r3, #8
 8001052:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69fa      	ldr	r2, [r7, #28]
 8001058:	615a      	str	r2, [r3, #20]
          break;
 800105a:	e003      	b.n	8001064 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800105c:	2300      	movs	r3, #0
 800105e:	623b      	str	r3, [r7, #32]
          break;
 8001060:	e000      	b.n	8001064 <HAL_GPIO_Init+0x130>
          break;
 8001062:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	2bff      	cmp	r3, #255	; 0xff
 8001068:	d801      	bhi.n	800106e <HAL_GPIO_Init+0x13a>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	e001      	b.n	8001072 <HAL_GPIO_Init+0x13e>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3304      	adds	r3, #4
 8001072:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	2bff      	cmp	r3, #255	; 0xff
 8001078:	d802      	bhi.n	8001080 <HAL_GPIO_Init+0x14c>
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	e002      	b.n	8001086 <HAL_GPIO_Init+0x152>
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	3b08      	subs	r3, #8
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	210f      	movs	r1, #15
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	fa01 f303 	lsl.w	r3, r1, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	401a      	ands	r2, r3
 8001098:	6a39      	ldr	r1, [r7, #32]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	fa01 f303 	lsl.w	r3, r1, r3
 80010a0:	431a      	orrs	r2, r3
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 80b1 	beq.w	8001216 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010b4:	4b4d      	ldr	r3, [pc, #308]	; (80011ec <HAL_GPIO_Init+0x2b8>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a4c      	ldr	r2, [pc, #304]	; (80011ec <HAL_GPIO_Init+0x2b8>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b4a      	ldr	r3, [pc, #296]	; (80011ec <HAL_GPIO_Init+0x2b8>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010cc:	4a48      	ldr	r2, [pc, #288]	; (80011f0 <HAL_GPIO_Init+0x2bc>)
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	3302      	adds	r3, #2
 80010d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	4013      	ands	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a40      	ldr	r2, [pc, #256]	; (80011f4 <HAL_GPIO_Init+0x2c0>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d013      	beq.n	8001120 <HAL_GPIO_Init+0x1ec>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a3f      	ldr	r2, [pc, #252]	; (80011f8 <HAL_GPIO_Init+0x2c4>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d00d      	beq.n	800111c <HAL_GPIO_Init+0x1e8>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a3e      	ldr	r2, [pc, #248]	; (80011fc <HAL_GPIO_Init+0x2c8>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d007      	beq.n	8001118 <HAL_GPIO_Init+0x1e4>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a3d      	ldr	r2, [pc, #244]	; (8001200 <HAL_GPIO_Init+0x2cc>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d101      	bne.n	8001114 <HAL_GPIO_Init+0x1e0>
 8001110:	2303      	movs	r3, #3
 8001112:	e006      	b.n	8001122 <HAL_GPIO_Init+0x1ee>
 8001114:	2304      	movs	r3, #4
 8001116:	e004      	b.n	8001122 <HAL_GPIO_Init+0x1ee>
 8001118:	2302      	movs	r3, #2
 800111a:	e002      	b.n	8001122 <HAL_GPIO_Init+0x1ee>
 800111c:	2301      	movs	r3, #1
 800111e:	e000      	b.n	8001122 <HAL_GPIO_Init+0x1ee>
 8001120:	2300      	movs	r3, #0
 8001122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001124:	f002 0203 	and.w	r2, r2, #3
 8001128:	0092      	lsls	r2, r2, #2
 800112a:	4093      	lsls	r3, r2
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	4313      	orrs	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001132:	492f      	ldr	r1, [pc, #188]	; (80011f0 <HAL_GPIO_Init+0x2bc>)
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	3302      	adds	r3, #2
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d006      	beq.n	800115a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800114c:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <HAL_GPIO_Init+0x2d0>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	492c      	ldr	r1, [pc, #176]	; (8001204 <HAL_GPIO_Init+0x2d0>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	600b      	str	r3, [r1, #0]
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800115a:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <HAL_GPIO_Init+0x2d0>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	43db      	mvns	r3, r3
 8001162:	4928      	ldr	r1, [pc, #160]	; (8001204 <HAL_GPIO_Init+0x2d0>)
 8001164:	4013      	ands	r3, r2
 8001166:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d006      	beq.n	8001182 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001174:	4b23      	ldr	r3, [pc, #140]	; (8001204 <HAL_GPIO_Init+0x2d0>)
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	4922      	ldr	r1, [pc, #136]	; (8001204 <HAL_GPIO_Init+0x2d0>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	604b      	str	r3, [r1, #4]
 8001180:	e006      	b.n	8001190 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001182:	4b20      	ldr	r3, [pc, #128]	; (8001204 <HAL_GPIO_Init+0x2d0>)
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	43db      	mvns	r3, r3
 800118a:	491e      	ldr	r1, [pc, #120]	; (8001204 <HAL_GPIO_Init+0x2d0>)
 800118c:	4013      	ands	r3, r2
 800118e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d006      	beq.n	80011aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_GPIO_Init+0x2d0>)
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	4918      	ldr	r1, [pc, #96]	; (8001204 <HAL_GPIO_Init+0x2d0>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	608b      	str	r3, [r1, #8]
 80011a8:	e006      	b.n	80011b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_GPIO_Init+0x2d0>)
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	4914      	ldr	r1, [pc, #80]	; (8001204 <HAL_GPIO_Init+0x2d0>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d021      	beq.n	8001208 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <HAL_GPIO_Init+0x2d0>)
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	490e      	ldr	r1, [pc, #56]	; (8001204 <HAL_GPIO_Init+0x2d0>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	60cb      	str	r3, [r1, #12]
 80011d0:	e021      	b.n	8001216 <HAL_GPIO_Init+0x2e2>
 80011d2:	bf00      	nop
 80011d4:	10320000 	.word	0x10320000
 80011d8:	10310000 	.word	0x10310000
 80011dc:	10220000 	.word	0x10220000
 80011e0:	10210000 	.word	0x10210000
 80011e4:	10120000 	.word	0x10120000
 80011e8:	10110000 	.word	0x10110000
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40010000 	.word	0x40010000
 80011f4:	40010800 	.word	0x40010800
 80011f8:	40010c00 	.word	0x40010c00
 80011fc:	40011000 	.word	0x40011000
 8001200:	40011400 	.word	0x40011400
 8001204:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <HAL_GPIO_Init+0x304>)
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	43db      	mvns	r3, r3
 8001210:	4909      	ldr	r1, [pc, #36]	; (8001238 <HAL_GPIO_Init+0x304>)
 8001212:	4013      	ands	r3, r2
 8001214:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	3301      	adds	r3, #1
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	fa22 f303 	lsr.w	r3, r2, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	f47f ae8e 	bne.w	8000f48 <HAL_GPIO_Init+0x14>
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	372c      	adds	r7, #44	; 0x2c
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	40010400 	.word	0x40010400

0800123c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d006      	beq.n	8001260 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f806 	bl	800126c <HAL_GPIO_EXTI_Callback>
  }
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40010400 	.word	0x40010400

0800126c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e272      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 8087 	beq.w	80013ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012a0:	4b92      	ldr	r3, [pc, #584]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 030c 	and.w	r3, r3, #12
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d00c      	beq.n	80012c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012ac:	4b8f      	ldr	r3, [pc, #572]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 030c 	and.w	r3, r3, #12
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d112      	bne.n	80012de <HAL_RCC_OscConfig+0x5e>
 80012b8:	4b8c      	ldr	r3, [pc, #560]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c4:	d10b      	bne.n	80012de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c6:	4b89      	ldr	r3, [pc, #548]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d06c      	beq.n	80013ac <HAL_RCC_OscConfig+0x12c>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d168      	bne.n	80013ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e24c      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e6:	d106      	bne.n	80012f6 <HAL_RCC_OscConfig+0x76>
 80012e8:	4b80      	ldr	r3, [pc, #512]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a7f      	ldr	r2, [pc, #508]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	e02e      	b.n	8001354 <HAL_RCC_OscConfig+0xd4>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10c      	bne.n	8001318 <HAL_RCC_OscConfig+0x98>
 80012fe:	4b7b      	ldr	r3, [pc, #492]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a7a      	ldr	r2, [pc, #488]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	4b78      	ldr	r3, [pc, #480]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a77      	ldr	r2, [pc, #476]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001310:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e01d      	b.n	8001354 <HAL_RCC_OscConfig+0xd4>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0xbc>
 8001322:	4b72      	ldr	r3, [pc, #456]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a71      	ldr	r2, [pc, #452]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	4b6f      	ldr	r3, [pc, #444]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a6e      	ldr	r2, [pc, #440]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e00b      	b.n	8001354 <HAL_RCC_OscConfig+0xd4>
 800133c:	4b6b      	ldr	r3, [pc, #428]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a6a      	ldr	r2, [pc, #424]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b68      	ldr	r3, [pc, #416]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a67      	ldr	r2, [pc, #412]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 800134e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001352:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d013      	beq.n	8001384 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fcae 	bl	8000cbc <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fcaa 	bl	8000cbc <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	; 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e200      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	4b5d      	ldr	r3, [pc, #372]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0xe4>
 8001382:	e014      	b.n	80013ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fc9a 	bl	8000cbc <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fc96 	bl	8000cbc <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	; 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e1ec      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	4b53      	ldr	r3, [pc, #332]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x10c>
 80013aa:	e000      	b.n	80013ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d063      	beq.n	8001482 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ba:	4b4c      	ldr	r3, [pc, #304]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013c6:	4b49      	ldr	r3, [pc, #292]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d11c      	bne.n	800140c <HAL_RCC_OscConfig+0x18c>
 80013d2:	4b46      	ldr	r3, [pc, #280]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d116      	bne.n	800140c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013de:	4b43      	ldr	r3, [pc, #268]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <HAL_RCC_OscConfig+0x176>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d001      	beq.n	80013f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e1c0      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f6:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4939      	ldr	r1, [pc, #228]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	e03a      	b.n	8001482 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d020      	beq.n	8001456 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001414:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <HAL_RCC_OscConfig+0x270>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141a:	f7ff fc4f 	bl	8000cbc <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff fc4b 	bl	8000cbc <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e1a1      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	4b2a      	ldr	r3, [pc, #168]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4927      	ldr	r1, [pc, #156]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
 8001454:	e015      	b.n	8001482 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <HAL_RCC_OscConfig+0x270>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fc2e 	bl	8000cbc <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001464:	f7ff fc2a 	bl	8000cbc <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e180      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d03a      	beq.n	8001504 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d019      	beq.n	80014ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <HAL_RCC_OscConfig+0x274>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149c:	f7ff fc0e 	bl	8000cbc <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a4:	f7ff fc0a 	bl	8000cbc <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e160      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f000 fad8 	bl	8001a78 <RCC_Delay>
 80014c8:	e01c      	b.n	8001504 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <HAL_RCC_OscConfig+0x274>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d0:	f7ff fbf4 	bl	8000cbc <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d6:	e00f      	b.n	80014f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d8:	f7ff fbf0 	bl	8000cbc <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d908      	bls.n	80014f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e146      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000
 80014f0:	42420000 	.word	0x42420000
 80014f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f8:	4b92      	ldr	r3, [pc, #584]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1e9      	bne.n	80014d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80a6 	beq.w	800165e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001516:	4b8b      	ldr	r3, [pc, #556]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10d      	bne.n	800153e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b88      	ldr	r3, [pc, #544]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	4a87      	ldr	r2, [pc, #540]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152c:	61d3      	str	r3, [r2, #28]
 800152e:	4b85      	ldr	r3, [pc, #532]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153a:	2301      	movs	r3, #1
 800153c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153e:	4b82      	ldr	r3, [pc, #520]	; (8001748 <HAL_RCC_OscConfig+0x4c8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001546:	2b00      	cmp	r3, #0
 8001548:	d118      	bne.n	800157c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154a:	4b7f      	ldr	r3, [pc, #508]	; (8001748 <HAL_RCC_OscConfig+0x4c8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a7e      	ldr	r2, [pc, #504]	; (8001748 <HAL_RCC_OscConfig+0x4c8>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001556:	f7ff fbb1 	bl	8000cbc <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155e:	f7ff fbad 	bl	8000cbc <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b64      	cmp	r3, #100	; 0x64
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e103      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001570:	4b75      	ldr	r3, [pc, #468]	; (8001748 <HAL_RCC_OscConfig+0x4c8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x312>
 8001584:	4b6f      	ldr	r3, [pc, #444]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	4a6e      	ldr	r2, [pc, #440]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6213      	str	r3, [r2, #32]
 8001590:	e02d      	b.n	80015ee <HAL_RCC_OscConfig+0x36e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x334>
 800159a:	4b6a      	ldr	r3, [pc, #424]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4a69      	ldr	r2, [pc, #420]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	f023 0301 	bic.w	r3, r3, #1
 80015a4:	6213      	str	r3, [r2, #32]
 80015a6:	4b67      	ldr	r3, [pc, #412]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4a66      	ldr	r2, [pc, #408]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015ac:	f023 0304 	bic.w	r3, r3, #4
 80015b0:	6213      	str	r3, [r2, #32]
 80015b2:	e01c      	b.n	80015ee <HAL_RCC_OscConfig+0x36e>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d10c      	bne.n	80015d6 <HAL_RCC_OscConfig+0x356>
 80015bc:	4b61      	ldr	r3, [pc, #388]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	4a60      	ldr	r2, [pc, #384]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	6213      	str	r3, [r2, #32]
 80015c8:	4b5e      	ldr	r3, [pc, #376]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	4a5d      	ldr	r2, [pc, #372]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6213      	str	r3, [r2, #32]
 80015d4:	e00b      	b.n	80015ee <HAL_RCC_OscConfig+0x36e>
 80015d6:	4b5b      	ldr	r3, [pc, #364]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4a5a      	ldr	r2, [pc, #360]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	6213      	str	r3, [r2, #32]
 80015e2:	4b58      	ldr	r3, [pc, #352]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	4a57      	ldr	r2, [pc, #348]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	f023 0304 	bic.w	r3, r3, #4
 80015ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d015      	beq.n	8001622 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f6:	f7ff fb61 	bl	8000cbc <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fc:	e00a      	b.n	8001614 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fe:	f7ff fb5d 	bl	8000cbc <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f241 3288 	movw	r2, #5000	; 0x1388
 800160c:	4293      	cmp	r3, r2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e0b1      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001614:	4b4b      	ldr	r3, [pc, #300]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0ee      	beq.n	80015fe <HAL_RCC_OscConfig+0x37e>
 8001620:	e014      	b.n	800164c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001622:	f7ff fb4b 	bl	8000cbc <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001628:	e00a      	b.n	8001640 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800162a:	f7ff fb47 	bl	8000cbc <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	f241 3288 	movw	r2, #5000	; 0x1388
 8001638:	4293      	cmp	r3, r2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e09b      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001640:	4b40      	ldr	r3, [pc, #256]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1ee      	bne.n	800162a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d105      	bne.n	800165e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001652:	4b3c      	ldr	r3, [pc, #240]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	4a3b      	ldr	r2, [pc, #236]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800165c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 8087 	beq.w	8001776 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001668:	4b36      	ldr	r3, [pc, #216]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 030c 	and.w	r3, r3, #12
 8001670:	2b08      	cmp	r3, #8
 8001672:	d061      	beq.n	8001738 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d146      	bne.n	800170a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167c:	4b33      	ldr	r3, [pc, #204]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001682:	f7ff fb1b 	bl	8000cbc <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168a:	f7ff fb17 	bl	8000cbc <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e06d      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800169c:	4b29      	ldr	r3, [pc, #164]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f0      	bne.n	800168a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b0:	d108      	bne.n	80016c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016b2:	4b24      	ldr	r3, [pc, #144]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	4921      	ldr	r1, [pc, #132]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c4:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a19      	ldr	r1, [r3, #32]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	430b      	orrs	r3, r1
 80016d6:	491b      	ldr	r1, [pc, #108]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 80016de:	2201      	movs	r2, #1
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff faeb 	bl	8000cbc <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ea:	f7ff fae7 	bl	8000cbc <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e03d      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f0      	beq.n	80016ea <HAL_RCC_OscConfig+0x46a>
 8001708:	e035      	b.n	8001776 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff fad4 	bl	8000cbc <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff fad0 	bl	8000cbc <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e026      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x498>
 8001736:	e01e      	b.n	8001776 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d107      	bne.n	8001750 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e019      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
 8001744:	40021000 	.word	0x40021000
 8001748:	40007000 	.word	0x40007000
 800174c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_RCC_OscConfig+0x500>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	429a      	cmp	r2, r3
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d001      	beq.n	8001776 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000

08001784 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0d0      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001798:	4b6a      	ldr	r3, [pc, #424]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d910      	bls.n	80017c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b67      	ldr	r3, [pc, #412]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 0207 	bic.w	r2, r3, #7
 80017ae:	4965      	ldr	r1, [pc, #404]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	4b63      	ldr	r3, [pc, #396]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0b8      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d020      	beq.n	8001816 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e0:	4b59      	ldr	r3, [pc, #356]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	4a58      	ldr	r2, [pc, #352]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f8:	4b53      	ldr	r3, [pc, #332]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4a52      	ldr	r2, [pc, #328]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001802:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001804:	4b50      	ldr	r3, [pc, #320]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	494d      	ldr	r1, [pc, #308]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	4313      	orrs	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d040      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d115      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e07f      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001842:	4b41      	ldr	r3, [pc, #260]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d109      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e073      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001852:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e06b      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001862:	4b39      	ldr	r3, [pc, #228]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f023 0203 	bic.w	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4936      	ldr	r1, [pc, #216]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001874:	f7ff fa22 	bl	8000cbc <HAL_GetTick>
 8001878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187a:	e00a      	b.n	8001892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187c:	f7ff fa1e 	bl	8000cbc <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f241 3288 	movw	r2, #5000	; 0x1388
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e053      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 020c 	and.w	r2, r3, #12
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d1eb      	bne.n	800187c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018a4:	4b27      	ldr	r3, [pc, #156]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d210      	bcs.n	80018d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b24      	ldr	r3, [pc, #144]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 0207 	bic.w	r2, r3, #7
 80018ba:	4922      	ldr	r1, [pc, #136]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	4313      	orrs	r3, r2
 80018c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e032      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e0:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4916      	ldr	r1, [pc, #88]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d009      	beq.n	8001912 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	490e      	ldr	r1, [pc, #56]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	4313      	orrs	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001912:	f000 f821 	bl	8001958 <HAL_RCC_GetSysClockFreq>
 8001916:	4602      	mov	r2, r0
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	490a      	ldr	r1, [pc, #40]	; (800194c <HAL_RCC_ClockConfig+0x1c8>)
 8001924:	5ccb      	ldrb	r3, [r1, r3]
 8001926:	fa22 f303 	lsr.w	r3, r2, r3
 800192a:	4a09      	ldr	r2, [pc, #36]	; (8001950 <HAL_RCC_ClockConfig+0x1cc>)
 800192c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_RCC_ClockConfig+0x1d0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f980 	bl	8000c38 <HAL_InitTick>

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40022000 	.word	0x40022000
 8001948:	40021000 	.word	0x40021000
 800194c:	08001ec4 	.word	0x08001ec4
 8001950:	20000020 	.word	0x20000020
 8001954:	20000024 	.word	0x20000024

08001958 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001958:	b490      	push	{r4, r7}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800195e:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <HAL_RCC_GetSysClockFreq+0xac>)
 8001960:	1d3c      	adds	r4, r7, #4
 8001962:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001964:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001968:	f240 2301 	movw	r3, #513	; 0x201
 800196c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001982:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b04      	cmp	r3, #4
 8001990:	d002      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x40>
 8001992:	2b08      	cmp	r3, #8
 8001994:	d003      	beq.n	800199e <HAL_RCC_GetSysClockFreq+0x46>
 8001996:	e02b      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001998:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xb4>)
 800199a:	623b      	str	r3, [r7, #32]
      break;
 800199c:	e02b      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	0c9b      	lsrs	r3, r3, #18
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	3328      	adds	r3, #40	; 0x28
 80019a8:	443b      	add	r3, r7
 80019aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019ae:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d012      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	0c5b      	lsrs	r3, r3, #17
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	3328      	adds	r3, #40	; 0x28
 80019c6:	443b      	add	r3, r7
 80019c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	4a0e      	ldr	r2, [pc, #56]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xb4>)
 80019d2:	fb03 f202 	mul.w	r2, r3, r2
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
 80019de:	e004      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019e4:	fb02 f303 	mul.w	r3, r2, r3
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	623b      	str	r3, [r7, #32]
      break;
 80019ee:	e002      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xb4>)
 80019f2:	623b      	str	r3, [r7, #32]
      break;
 80019f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019f6:	6a3b      	ldr	r3, [r7, #32]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3728      	adds	r7, #40	; 0x28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc90      	pop	{r4, r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	08001eb4 	.word	0x08001eb4
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	007a1200 	.word	0x007a1200
 8001a10:	003d0900 	.word	0x003d0900

08001a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a18:	4b02      	ldr	r3, [pc, #8]	; (8001a24 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	20000020 	.word	0x20000020

08001a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a2c:	f7ff fff2 	bl	8001a14 <HAL_RCC_GetHCLKFreq>
 8001a30:	4602      	mov	r2, r0
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	0a1b      	lsrs	r3, r3, #8
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	4903      	ldr	r1, [pc, #12]	; (8001a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a3e:	5ccb      	ldrb	r3, [r1, r3]
 8001a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	08001ed4 	.word	0x08001ed4

08001a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a54:	f7ff ffde 	bl	8001a14 <HAL_RCC_GetHCLKFreq>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	0adb      	lsrs	r3, r3, #11
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	4903      	ldr	r1, [pc, #12]	; (8001a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a66:	5ccb      	ldrb	r3, [r1, r3]
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40021000 	.word	0x40021000
 8001a74:	08001ed4 	.word	0x08001ed4

08001a78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a80:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <RCC_Delay+0x34>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <RCC_Delay+0x38>)
 8001a86:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8a:	0a5b      	lsrs	r3, r3, #9
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	fb02 f303 	mul.w	r3, r2, r3
 8001a92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a94:	bf00      	nop
  }
  while (Delay --);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1e5a      	subs	r2, r3, #1
 8001a9a:	60fa      	str	r2, [r7, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f9      	bne.n	8001a94 <RCC_Delay+0x1c>
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	20000020 	.word	0x20000020
 8001ab0:	10624dd3 	.word	0x10624dd3

08001ab4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e03f      	b.n	8001b46 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d106      	bne.n	8001ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7fe fff4 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2224      	movs	r2, #36	; 0x24
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001af6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f915 	bl	8001d28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b08a      	sub	sp, #40	; 0x28
 8001b52:	af02      	add	r7, sp, #8
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	603b      	str	r3, [r7, #0]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b20      	cmp	r3, #32
 8001b6c:	f040 808c 	bne.w	8001c88 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <HAL_UART_Receive+0x2e>
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e084      	b.n	8001c8a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_UART_Receive+0x40>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e07d      	b.n	8001c8a <HAL_UART_Receive+0x13c>
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2222      	movs	r2, #34	; 0x22
 8001ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001baa:	f7ff f887 	bl	8000cbc <HAL_GetTick>
 8001bae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	88fa      	ldrh	r2, [r7, #6]
 8001bb4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	88fa      	ldrh	r2, [r7, #6]
 8001bba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bc4:	d108      	bne.n	8001bd8 <HAL_UART_Receive+0x8a>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d104      	bne.n	8001bd8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	e003      	b.n	8001be0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001be8:	e043      	b.n	8001c72 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2120      	movs	r1, #32
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 f84c 	bl	8001c92 <UART_WaitOnFlagUntilTimeout>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e042      	b.n	8001c8a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10c      	bne.n	8001c24 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	3302      	adds	r3, #2
 8001c20:	61bb      	str	r3, [r7, #24]
 8001c22:	e01f      	b.n	8001c64 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c2c:	d007      	beq.n	8001c3e <HAL_UART_Receive+0xf0>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10a      	bne.n	8001c4c <HAL_UART_Receive+0xfe>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	701a      	strb	r2, [r3, #0]
 8001c4a:	e008      	b.n	8001c5e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3301      	adds	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1b6      	bne.n	8001bea <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	e000      	b.n	8001c8a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001c88:	2302      	movs	r3, #2
  }
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b084      	sub	sp, #16
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ca2:	e02c      	b.n	8001cfe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001caa:	d028      	beq.n	8001cfe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d007      	beq.n	8001cc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001cb2:	f7ff f803 	bl	8000cbc <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d21d      	bcs.n	8001cfe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001cd0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	695a      	ldr	r2, [r3, #20]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0201 	bic.w	r2, r2, #1
 8001ce0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2220      	movs	r2, #32
 8001cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e00f      	b.n	8001d1e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4013      	ands	r3, r2
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	bf0c      	ite	eq
 8001d0e:	2301      	moveq	r3, #1
 8001d10:	2300      	movne	r3, #0
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	461a      	mov	r2, r3
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d0c3      	beq.n	8001ca4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d62:	f023 030c 	bic.w	r3, r3, #12
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	68b9      	ldr	r1, [r7, #8]
 8001d6c:	430b      	orrs	r3, r1
 8001d6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699a      	ldr	r2, [r3, #24]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a2c      	ldr	r2, [pc, #176]	; (8001e3c <UART_SetConfig+0x114>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d103      	bne.n	8001d98 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d90:	f7ff fe5e 	bl	8001a50 <HAL_RCC_GetPCLK2Freq>
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	e002      	b.n	8001d9e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d98:	f7ff fe46 	bl	8001a28 <HAL_RCC_GetPCLK1Freq>
 8001d9c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	009a      	lsls	r2, r3, #2
 8001da8:	441a      	add	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db4:	4a22      	ldr	r2, [pc, #136]	; (8001e40 <UART_SetConfig+0x118>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	0119      	lsls	r1, r3, #4
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009a      	lsls	r2, r3, #2
 8001dc8:	441a      	add	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <UART_SetConfig+0x118>)
 8001dd6:	fba3 0302 	umull	r0, r3, r3, r2
 8001dda:	095b      	lsrs	r3, r3, #5
 8001ddc:	2064      	movs	r0, #100	; 0x64
 8001dde:	fb00 f303 	mul.w	r3, r0, r3
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	3332      	adds	r3, #50	; 0x32
 8001de8:	4a15      	ldr	r2, [pc, #84]	; (8001e40 <UART_SetConfig+0x118>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df4:	4419      	add	r1, r3
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009a      	lsls	r2, r3, #2
 8001e00:	441a      	add	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <UART_SetConfig+0x118>)
 8001e0e:	fba3 0302 	umull	r0, r3, r3, r2
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	2064      	movs	r0, #100	; 0x64
 8001e16:	fb00 f303 	mul.w	r3, r0, r3
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	3332      	adds	r3, #50	; 0x32
 8001e20:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <UART_SetConfig+0x118>)
 8001e22:	fba2 2303 	umull	r2, r3, r2, r3
 8001e26:	095b      	lsrs	r3, r3, #5
 8001e28:	f003 020f 	and.w	r2, r3, #15
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	440a      	add	r2, r1
 8001e32:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40013800 	.word	0x40013800
 8001e40:	51eb851f 	.word	0x51eb851f

08001e44 <__libc_init_array>:
 8001e44:	b570      	push	{r4, r5, r6, lr}
 8001e46:	2600      	movs	r6, #0
 8001e48:	4d0c      	ldr	r5, [pc, #48]	; (8001e7c <__libc_init_array+0x38>)
 8001e4a:	4c0d      	ldr	r4, [pc, #52]	; (8001e80 <__libc_init_array+0x3c>)
 8001e4c:	1b64      	subs	r4, r4, r5
 8001e4e:	10a4      	asrs	r4, r4, #2
 8001e50:	42a6      	cmp	r6, r4
 8001e52:	d109      	bne.n	8001e68 <__libc_init_array+0x24>
 8001e54:	f000 f822 	bl	8001e9c <_init>
 8001e58:	2600      	movs	r6, #0
 8001e5a:	4d0a      	ldr	r5, [pc, #40]	; (8001e84 <__libc_init_array+0x40>)
 8001e5c:	4c0a      	ldr	r4, [pc, #40]	; (8001e88 <__libc_init_array+0x44>)
 8001e5e:	1b64      	subs	r4, r4, r5
 8001e60:	10a4      	asrs	r4, r4, #2
 8001e62:	42a6      	cmp	r6, r4
 8001e64:	d105      	bne.n	8001e72 <__libc_init_array+0x2e>
 8001e66:	bd70      	pop	{r4, r5, r6, pc}
 8001e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e6c:	4798      	blx	r3
 8001e6e:	3601      	adds	r6, #1
 8001e70:	e7ee      	b.n	8001e50 <__libc_init_array+0xc>
 8001e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e76:	4798      	blx	r3
 8001e78:	3601      	adds	r6, #1
 8001e7a:	e7f2      	b.n	8001e62 <__libc_init_array+0x1e>
 8001e7c:	08001edc 	.word	0x08001edc
 8001e80:	08001edc 	.word	0x08001edc
 8001e84:	08001edc 	.word	0x08001edc
 8001e88:	08001ee0 	.word	0x08001ee0

08001e8c <memset>:
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4402      	add	r2, r0
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d100      	bne.n	8001e96 <memset+0xa>
 8001e94:	4770      	bx	lr
 8001e96:	f803 1b01 	strb.w	r1, [r3], #1
 8001e9a:	e7f9      	b.n	8001e90 <memset+0x4>

08001e9c <_init>:
 8001e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9e:	bf00      	nop
 8001ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ea2:	bc08      	pop	{r3}
 8001ea4:	469e      	mov	lr, r3
 8001ea6:	4770      	bx	lr

08001ea8 <_fini>:
 8001ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eaa:	bf00      	nop
 8001eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eae:	bc08      	pop	{r3}
 8001eb0:	469e      	mov	lr, r3
 8001eb2:	4770      	bx	lr
